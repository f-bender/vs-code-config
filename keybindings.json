// Place your key bindings in this file to override the defaultsauto[]
//
//* Triggering of keybindings can be monitored using the "Developer: Toggle Keyboard Shortcuts Troubleshooting" command.
//
//* "when clause contexts" ("when"-conditions) can be debugged using the "Developer: Inspect Context Keys" command,
//* which outputs the current context keys to the Developer Console, which can be activated using the "Developer: Toggle Developer Tools" command.
//* See https://code.visualstudio.com/api/references/when-clause-contexts
[
  // Azure
  {
    "key": "ctrl+shift+a",
    "command": "workbench.view.extension.azure"
  },
  {
    "key": "shift+alt+a",
    "command": "-workbench.view.extension.azure"
  },
  // Amazon Q / Code Whisperer
  {
    "key": "ctrl+enter",
    "command": "aws.amazonq.invokeInlineCompletion",
    "when": "aws.codewhisperer.connected && editorTextFocus"
  },
  {
    "key": "alt+c",
    "command": "-aws.amazonq.invokeInlineCompletion",
    "when": "aws.codewhisperer.connected && editorTextFocus"
  },
  {
    "key": "ctrl+shift+m e",
    "command": "aws.amazonq.explainCode"
  },
  {
    "key": "alt+win+e",
    "command": "-aws.amazonq.explainCode"
  },
  {
    "key": "ctrl+shift+m f",
    "command": "aws.amazonq.fixCode"
  },
  {
    "key": "alt+win+y",
    "command": "-aws.amazonq.fixCode"
  },
  {
    "key": "ctrl+shift+m o",
    "command": "aws.amazonq.optimizeCode"
  },
  {
    "key": "alt+win+a",
    "command": "-aws.amazonq.optimizeCode"
  },
  {
    "key": "ctrl+shift+m r",
    "command": "aws.amazonq.refactorCode"
  },
  {
    "key": "alt+win+u",
    "command": "-aws.amazonq.refactorCode"
  },
  {
    "key": "ctrl+shift+m p",
    "command": "aws.amazonq.sendToPrompt"
  },
  {
    "key": "alt+win+q",
    "command": "-aws.amazonq.sendToPrompt"
  },
  {
    "key": "ctrl+shift+m ctrl+shift+oem_comma",
    "command": "aws.AmazonQChatView.focus"
  },
  // General
  {
    "key": "ctrl+shift+c",
    "command": "-workbench.action.terminal.openNativeConsole",
    "when": "!terminalFocus"
  },
  {
    "key": "ctrl+shift+c",
    "command": "editor.action.commentLine",
    "when": "editorTextFocus && !editorReadonly && !vim.active"
  },
  {
    "key": "ctrl+oem_2",
    "command": "-editor.action.commentLine",
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "key": "ctrl+u",
    "command": "editor.action.transformToUppercase",
    "when": "!vim.active"
  },
  {
    "key": "ctrl+shift+z",
    "command": "cursorUndo",
    "when": "textInputFocus && !vim.active"
  },
  {
    "key": "ctrl+u",
    "command": "-cursorUndo",
    "when": "textInputFocus"
  },
  {
    "key": "ctrl+shift+z",
    "command": "-redo"
  },
  {
    "key": "ctrl+shift+y",
    "command": "cursorRedo",
    "when": "!vim.active"
  },
  {
    "key": "ctrl+l",
    "command": "editor.action.transformToLowercase",
    "when": "!vim.active"
  },
  {
    "key": "shift+alt+a",
    "command": "workbench.action.tasks.runTask",
    "args": "pytest"
  },
  {
    "key": "ctrl+z",
    "command": "undo",
    "when": "!vim.active || vim.mode == 'Insert' || !editorFocus"
  },
  {
    "key": "ctrl+z",
    "command": "-undo"
  },
  {
    "key": "ctrl+y",
    "command": "redo",
    "when": "!vim.active || vim.mode == 'Insert'"
  },
  {
    "key": "ctrl+y",
    "command": "-redo"
  },
  {
    "key": "ctrl+7",
    "command": "editor.action.commentLine",
    "when": "editorTextFocus && !editorReadonly && vim.active"
  },
  {
    "key": "ctrl+alt+k",
    "command": "editor.action.insertCursorAbove",
    "when": "editorTextFocus && vim.active"
  },
  {
    "key": "ctrl+alt+j",
    "command": "editor.action.insertCursorBelow",
    "when": "editorTextFocus && vim.active"
  },
  {
    "key": "ctrl+shift+l",
    "command": "git.stageChange", // unfortunately broken...
    "when": "dirtyDiffVisible"
  },
  {
    "key": "ctrl+shift+l",
    "command": "git.stageSelectedRanges", // as a workaround while the above doesn't work. Stage everything within the current selection
    "when": "editorTextFocus"
  },
  {
    "key": "ctrl+h",
    "command": "workbench.action.compareEditor.focusOtherSide"
  },
  {
    "key": "ctrl+shift+h",
    "command": "git.revertChange", // unfortunately broken...
    "when": "dirtyDiffVisible"
  },
  {
    "key": "ctrl+shift+h",
    "command": "git.revertSelectedRanges", // as a workaround while the above doesn't work. Revert everything within the current selection
    "when": "editorTextFocus"
  },
  {
    "key": "ctrl+shift+j",
    "command": "runCommands",
    "when": "editorTextFocus && !textCompareEditorActive && vim.mode == 'Normal' && !github.copilot.panelVisible",
    "args": {
      "commands": [
        "editor.action.dirtydiff.next",
        {
          "command": "vim.remap",
          "args": {
            "after": [
              "M",
            ]
          },
        },
      ]
    }
  },
  {
    "key": "ctrl+shift+k",
    "command": "runCommands",
    "when": "editorTextFocus && !textCompareEditorActive && vim.mode == 'Normal' && !github.copilot.panelVisible",
    "args": {
      "commands": [
        "editor.action.dirtydiff.previous",
        {
          "command": "vim.remap",
          "args": {
            "after": [
              "M",
            ]
          },
        },
      ]
    }
  },
  {
    "key": "ctrl+l",
    "command": "closeDirtyDiff",
    "when": "dirtyDiffVisible && vim.active"
  },
  {
    "key": "shift+escape",
    "command": "-closeDirtyDiff",
    "when": "dirtyDiffVisible"
  },
  {
    "key": "ctrl+alt+f",
    "command": "editor.toggleFold", // NOTE: works in vim using "za"!
    "when": "editorTextFocus && foldingEnabled && vim.active"
  },
  {
    "key": "ctrl+alt+oem_3",
    "command": "workbench.action.toggleMaximizedPanel"
  },
  {
    "key": "alt+l",
    "command": "workbench.action.moveEditorToNextGroup",
    "when": "vim.active && !panelFocus && !sideBarFocus"
  },
  {
    "key": "alt+h",
    "command": "workbench.action.moveEditorToPreviousGroup",
    "when": "!sideBarFocus && !panelFocus && vim.active"
  },
  {
    "key": "ctrl+k",
    "command": "selectPrevSuggestion",
    "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus || suggestWidgetVisible && textInputFocus && !suggestWidgetHasFocusedSuggestion && vim.active"
  },
  {
    "key": "ctrl+j",
    "command": "selectNextSuggestion",
    "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus || suggestWidgetVisible && textInputFocus && !suggestWidgetHasFocusedSuggestion && vim.active"
  },
  {
    "key": "ctrl+j",
    "command": "workbench.action.terminal.selectNextSuggestion",
    "when": "terminalFocus && terminalHasBeenCreated && terminalIsOpen && terminalSuggestWidgetVisible || terminalFocus && terminalIsOpen && terminalProcessSupported && terminalSuggestWidgetVisible && vim.active"
  },
  {
    "key": "ctrl+k",
    "command": "workbench.action.terminal.selectPrevSuggestion",
    "when": "terminalFocus && terminalHasBeenCreated && terminalIsOpen && terminalSuggestWidgetVisible || terminalFocus && terminalIsOpen && terminalProcessSupported && terminalSuggestWidgetVisible && vim.active"
  },
  {
    "key": "ctrl+j",
    "command": "selectNextCodeAction",
    "when": "codeActionMenuVisible && vim.active"
  },
  {
    "key": "ctrl+k",
    "command": "selectPrevCodeAction",
    "when": "codeActionMenuVisible && vim.active"
  },
  {
    "key": "alt+f",
    "command": "actions.find",
    "when": "editorFocus || editorIsOpen && vim.active"
  },
  {
    "key": "ctrl+shift+j",
    "command": "workbench.action.terminal.focusNext",
    "when": "terminalFocus && terminalHasBeenCreated && !terminalEditorFocus || terminalFocus && terminalProcessSupported && !terminalEditorFocus"
  },
  {
    "key": "ctrl+shift+k",
    "command": "workbench.action.terminal.focusPrevious",
    "when": "terminalFocus && terminalHasBeenCreated && !terminalEditorFocus || terminalFocus && terminalProcessSupported && !terminalEditorFocus"
  },
  {
    "key": "ctrl+m",
    "command": "editor.action.showHover",
    "when": "editorTextFocus && vim.active && vim.mode != 'SearchInProgressMode' && !suggestWidgetVisible"
  },
  {
    "key": "j",
    "command": "editor.action.scrollDownHover",
    "when": "editorHoverFocused && vim.active"
  },
  {
    "key": "k",
    "command": "editor.action.scrollUpHover",
    "when": "editorHoverFocused && vim.active"
  },
  {
    "key": "l",
    "command": "editor.action.scrollRightHover",
    "when": "editorHoverFocused && vim.active"
  },
  {
    "key": "h",
    "command": "editor.action.scrollLeftHover",
    "when": "editorHoverFocused && vim.active"
  },
  {
    "key": "ctrl+u",
    "command": "editor.action.pageUpHover",
    "when": "editorHoverFocused && vim.active"
  },
  {
    "key": "ctrl+d",
    "command": "editor.action.pageDownHover",
    "when": "editorHoverFocused && vim.active"
  },
  {
    "key": "ctrl+shift+l",
    "command": "workbench.action.focusActiveEditorGroup",
    "when": "terminalFocus || sideBarFocus"
  },
  {
    "key": "ctrl+j",
    "command": "workbench.action.quickOpenSelectNext",
    "when": "inQuickOpen"
  },
  {
    "key": "ctrl+k",
    "command": "workbench.action.quickOpenSelectPrevious",
    "when": "inQuickOpen"
  },
  {
    "key": "ctrl+n",
    "command": "workbench.action.quickOpenNavigateNextInTerminalPicker",
    "when": "terminalFocus && vim.active"
  },
  {
    "key": "ctrl+p",
    "command": "workbench.action.quickOpenNavigatePreviousInTerminalPicker",
    "when": "terminalFocus && vim.active"
  },
  {
    "key": "alt+j",
    "command": "workbench.action.terminal.scrollToNextCommand",
    "when": "terminalFocus && terminalHasBeenCreated && !accessibilityModeEnabled || terminalFocus && terminalProcessSupported && vim.active && !accessibilityModeEnabled"
  },
  {
    "key": "alt+k",
    "command": "workbench.action.terminal.scrollToPreviousCommand",
    "when": "terminalFocus && terminalHasBeenCreated && !accessibilityModeEnabled || terminalFocus && terminalProcessSupported && vim.active && !accessibilityModeEnabled"
  },
  {
    "key": "alt+u",
    "command": "workbench.action.terminal.scrollUpPage",
    "when": "terminalFocusInAny && terminalHasBeenCreated && !terminalAltBufferActive || terminalFocusInAny && terminalProcessSupported && vim.active && !terminalAltBufferActive"
  },
  {
    "key": "alt+d",
    "command": "workbench.action.terminal.scrollDownPage",
    "when": "terminalFocusInAny && terminalHasBeenCreated && !terminalAltBufferActive || terminalFocusInAny && terminalProcessSupported && vim.active && !terminalAltBufferActive"
  },
  {
    "key": "ctrl+k",
    "command": "workbench.action.terminal.scrollUp",
    "when": "terminalFocusInAny && terminalHasBeenCreated && !terminalAltBufferActive || terminalFocusInAny && terminalProcessSupported && !terminalAltBufferActive && vim.active"
  },
  {
    "key": "ctrl+j",
    "command": "workbench.action.terminal.scrollDown",
    "when": "terminalFocusInAny && terminalHasBeenCreated && !terminalAltBufferActive || terminalFocusInAny && terminalProcessSupported && !terminalAltBufferActive && vim.active"
  },
  {
    "key": "ctrl+m",
    "command": "-editor.action.toggleTabFocusMode"
  },
  {
    "key": "alt+d",
    "command": "extension.partialDiff.diffSelectionWithClipboard",
    "when": "editorFocus"
  },
  {
    "key": "ctrl+e",
    "command": "workbench.action.quickOpen",
    "when": "!vim.active"
  },
  {
    "key": "ctrl+e",
    "command": "-workbench.action.quickOpen" // to allow Ctrl + E for going to end of the line in bash
  },
  {
    "key": "ctrl+7",
    "command": "workbench.action.terminal.focusFind",
    "when": "terminalFindFocused && terminalHasBeenCreated || terminalFindFocused && terminalProcessSupported || terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported && vim.active"
  },
  {
    "key": "ctrl+f",
    "command": "workbench.action.terminal.focusFind",
    "when": "(terminalFindFocused && terminalHasBeenCreated && !vim.active || terminalFindFocused && terminalProcessSupported && !vim.active || terminalFocus && terminalHasBeenCreated && !vim.active || terminalFocus && terminalProcessSupported) && !vim.active"
  },
  {
    "key": "ctrl+f",
    "command": "-workbench.action.terminal.focusFind",
    "when": "terminalFindFocused && terminalHasBeenCreated || terminalFindFocused && terminalProcessSupported || terminalFocusInAny && terminalHasBeenCreated || terminalFocusInAny && terminalProcessSupported"
  },
  {
    "key": "ctrl+j",
    "command": "-workbench.action.togglePanel"
  },
  {
    "key": "l",
    "command": "breadcrumbs.focusNextWithPicker",
    "when": "breadcrumbsActive && breadcrumbsVisible && listFocus && !inputFocus"
  },
  {
    "key": "h",
    "command": "breadcrumbs.focusPreviousWithPicker",
    "when": "breadcrumbsActive && breadcrumbsVisible && listFocus && !inputFocus",
  },
  {
    "key": "ctrl+oem_comma",
    "command": "-workbench.action.openSettings"
  },
  {
    "key": "ctrl+b",
    "command": "-workbench.action.toggleSidebarVisibility"
  },
  {
    "key": "ctrl+oem_comma",
    "command": "workbench.view.explorer",
    "when": "viewContainer.workbench.view.explorer.enabled && !sideBarVisible || (sideBarFocus || focusedView == 'aws.AmazonQChatView' || focusedView == 'github:createPullRequestWebview' || focusedView == 'gitlens.views.commitDetails') && viewContainer.workbench.view.explorer.enabled && !filesExplorerFocus"
  },
  {
    "key": "ctrl+shift+e",
    "command": "-workbench.view.explorer",
    "when": "viewContainer.workbench.view.explorer.enabled"
  },
  {
    "key": "ctrl+l",
    "command": "notebook.cell.quitEdit",
    "when": "inputFocus && notebookEditorFocused && vim.active && !editorHasSelection && !editorHoverVisible && vim.mode == 'Normal'"
  },
  {
    "key": "u",
    "command": "undo",
    "when": "notebookEditorFocused && !inputFocus && !notebookOutputInputFocused"
  },
  {
    "key": "z",
    "command": "-undo",
    "when": "notebookEditorFocused && !inputFocus && !notebookOutputInputFocused"
  },
  {
    "key": "ctrl+r",
    "command": "redo",
    "when": "notebookEditorFocused && !inputFocus && !notebookOutputInputFocused"
  },
  {
    "key": "ctrl+l",
    "command": "workbench.action.focusActiveEditorGroup",
    "when": "!editorTextFocus || panelFocus"
  },
  {
    "key": "shift+j",
    "command": "notebook.cell.executeCellAndBelow",
    "when": "notebookEditorFocused && !inputFocus && !notebookOutputInputFocused"
  },
  {
    "key": "shift+k",
    "command": "notebook.cell.executeCellsAbove",
    "when": "notebookEditorFocused && !inputFocus && !notebookOutputInputFocused"
  },
  {
    "key": "shift+r",
    "command": "jupyter.restartkernel",
    "when": "notebookEditorFocused && !inputFocus && !notebookOutputInputFocused"
  },
  {
    "key": "g t",
    "command": "workbench.action.nextEditorInGroup",
    "when": "vim.active && !inputFocus"
  },
  {
    "key": "g shift+t",
    "command": "workbench.action.previousEditorInGroup",
    "when": "vim.active && !inputFocus"
  },
  {
    "key": "y",
    "command": "notebook.cell.copy",
    "when": "notebookEditorFocused && !inputFocus && !notebookOutputInputFocused && vim.active"
  },
  {
    "key": "c",
    "command": "-notebook.cell.copy",
    "when": "notebookEditorFocused && !inputFocus && !notebookOutputInputFocused"
  },
  {
    "key": "c",
    "command": "notebook.cell.copy",
    "when": "notebookEditorFocused && !inputFocus && !notebookOutputInputFocused && !vim.active"
  },
  {
    "key": "p",
    "command": "notebook.cell.paste",
    "when": "notebookEditorFocused && !inputFocus && !notebookOutputInputFocused && vim.active"
  },
  {
    "key": "v",
    "command": "notebook.cell.paste",
    "when": "notebookEditorFocused && !inputFocus && !notebookOutputInputFocused && !vim.active"
  },
  {
    "key": "v",
    "command": "-notebook.cell.paste",
    "when": "notebookEditorFocused && !inputFocus && !notebookOutputInputFocused"
  },
  {
    "key": "d d",
    "command": "-notebook.cell.delete",
    "when": "notebookEditorFocused && !inputFocus && !notebookOutputInputFocused"
  },
  {
    "key": "d",
    "command": "notebook.cell.cut",
    "when": "notebookEditorFocused && !inputFocus && !notebookOutputInputFocused"
  },
  {
    "key": "x",
    "command": "-notebook.cell.cut",
    "when": "notebookEditorFocused && !inputFocus && !notebookOutputInputFocused"
  },
  {
    "key": "shift+p",
    "command": "notebook.cell.pasteAbove",
    "when": "notebookEditorFocused && !inputFocus && vim.active"
  },
  {
    "key": "ctrl+shift+v",
    "command": "notebook.cell.pasteAbove",
    "when": "notebookEditorFocused && !inputFocus && !vim.active"
  },
  {
    "key": "ctrl+shift+v",
    "command": "-notebook.cell.pasteAbove",
    "when": "notebookEditorFocused && !inputFocus"
  },
  {
    "key": "ctrl+h",
    "command": "workbench.action.terminal.focusNextPane",
    "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported"
  },
  {
    "key": "alt+oem_3",
    "command": "workbench.action.terminal.split",
    "when": "terminalFocus && terminalProcessSupported || terminalFocus && terminalWebExtensionContributedProfile"
  },
  {
    "key": "ctrl+alt+l",
    "command": "workbench.action.terminal.resizePaneRight",
    "when": "terminalFocus && vim.active"
  },
  {
    "key": "ctrl+alt+h",
    "command": "workbench.action.terminal.resizePaneLeft",
    "when": "terminalFocus && vim.active"
  },
  {
    "key": "ctrl+alt+l",
    "command": "workbench.action.decreaseViewSize",
    "when": "vim.active && sideBarFocus"
  },
  {
    "key": "ctrl+alt+h",
    "command": "workbench.action.increaseViewSize",
    "when": "sideBarFocus && vim.active"
  },
  {
    "key": "ctrl+alt+l",
    "command": "workbench.action.decreaseViewSize",
    "when": "vim.active && panelFocus && !sideBarFocus && !terminalFocus"
  },
  {
    "key": "ctrl+alt+h",
    "command": "workbench.action.increaseViewSize",
    "when": "vim.active && panelFocus && !sideBarFocus && !terminalFocus"
  },
  {
    "key": "alt+j",
    "command": "runCommands",
    "when": "editorTextFocus && !editorReadonly && (vim.mode == 'Visual' || vim.mode == 'VisualLine')",
    "args": {
      "commands": [
        "editor.action.moveLinesDownAction",
        {
          "command": "vim.remap",
          "args": {
            "after": [
              "j",
              "o",
              "j",
              "o",
            ]
          },
        },
      ]
    }
  },
  {
    "key": "alt+k",
    "command": "runCommands",
    "when": "editorTextFocus && !editorReadonly && (vim.mode == 'Visual' || vim.mode == 'VisualLine')",
    "args": {
      "commands": [
        "editor.action.moveLinesUpAction",
        {
          "command": "vim.remap",
          "args": {
            "after": [
              "k",
              "o",
              "k",
              "o",
            ]
          },
        },
      ]
    }
  },
  {
    "key": "alt+j",
    "command": "editor.action.moveLinesDownAction",
    "when": "editorTextFocus && !editorReadonly && vim.mode == 'Normal'",
  },
  {
    "key": "alt+k",
    "command": "editor.action.moveLinesUpAction",
    "when": "editorTextFocus && !editorReadonly && vim.mode == 'Normal'",
  },
  {
    "key": "alt+j",
    "command": "notebook.cell.moveDown",
    "when": "notebookEditorFocused && !inputFocus"
  },
  {
    "key": "alt+k",
    "command": "notebook.cell.moveUp",
    "when": "notebookEditorFocused && !inputFocus"
  },
  {
    "key": "z shift+a",
    "command": "notebook.cell.collapseCellInput",
    "when": "notebookCellListFocused && !inputFocus && !notebookCellInputIsCollapsed"
  },
  {
    "key": "z a",
    "command": "notebook.cell.collapseCellOutput",
    "when": "notebookCellListFocused && !inputFocus && !notebookCellOutputIsCollapsed"
  },
  {
    "key": "z shift+a",
    "command": "notebook.cell.expandCellInput",
    "when": "notebookCellInputIsCollapsed && notebookCellListFocused && !inputFocus"
  },
  {
    "key": "z a",
    "command": "notebook.cell.expandCellOutput",
    "when": "notebookCellListFocused && notebookCellOutputIsCollapsed && !inputFocus"
  },
  {
    "key": "z shift+m",
    "command": "notebook.cell.collapseAllCellInputs",
    "when": "notebookCellListFocused && !inputFocus"
  },
  {
    "key": "z m",
    "command": "notebook.cell.collapseAllCellOutputs",
    "when": "notebookCellListFocused && !inputFocus"
  },
  {
    "key": "z shift+r",
    "command": "notebook.cell.expandAllCellInputs",
    "when": "notebookCellListFocused && !inputFocus"
  },
  {
    "key": "z r",
    "command": "notebook.cell.expandAllCellOutputs",
    "when": "notebookCellListFocused && !inputFocus"
  },
  {
    "key": "ctrl+k ctrl+c",
    "command": "-notebook.cell.collapseCellInput",
    "when": "notebookCellListFocused && !inputFocus && !notebookCellInputIsCollapsed"
  },
  {
    "key": "ctrl+k t",
    "command": "-notebook.cell.collapseCellOutput",
    "when": "notebookCellHasOutputs && notebookCellListFocused && !inputFocus && !notebookCellOutputIsCollapsed"
  },
  {
    "key": "ctrl+k ctrl+c",
    "command": "-notebook.cell.expandCellInput",
    "when": "notebookCellInputIsCollapsed && notebookCellListFocused"
  },
  {
    "key": "ctrl+k t",
    "command": "-notebook.cell.expandCellOutput",
    "when": "notebookCellListFocused && notebookCellOutputIsCollapsed"
  },
  {
    "key": "z z",
    "command": "notebook.centerActiveCell",
    "when": "notebookCellListFocused && !inputFocus"
  },
  {
    "key": "ctrl+l",
    "command": "-notebook.centerActiveCell",
    "when": "notebookEditorFocused"
  },
  {
    "key": "m",
    "command": "notebook.cell.changeToCode",
    "when": "notebookEditorFocused && !inputFocus && !notebookOutputFocused && activeEditor == 'workbench.editor.notebook' && notebookCellType == 'markup'"
  },
  {
    "key": "y",
    "command": "-notebook.cell.changeToCode",
    "when": "notebookEditorFocused && !inputFocus && !notebookOutputFocused && activeEditor == 'workbench.editor.notebook' && notebookCellType == 'markup'"
  },
  {
    "key": "shift+o",
    "command": "notebook.cell.insertCodeCellAbove",
    "when": "notebookEditorFocused && !inputFocus && !notebookOutputInputFocused"
  },
  {
    "key": "o",
    "command": "notebook.cell.insertCodeCellBelow",
    "when": "notebookEditorFocused && !inputFocus && !notebookOutputInputFocused"
  },
  {
    "key": "oem_minus",
    "command": "notebook.cell.joinBelow",
    "when": "notebookEditorFocused && !inQuickOpen && !inputFocus"
  },
  {
    "key": "alt+win+j",
    "command": "-notebook.cell.joinBelow",
    "when": "notebookEditorFocused"
  },
  {
    "key": "ctrl+shift+enter",
    "command": "notebook.cell.focusInOutput",
    "when": "notebookCellHasOutputs && notebookEditorFocused && !inputFocus && vim.active"
  },
  {
    "key": "z s",
    "command": "notebook.cell.toggleOutputScrolling",
    "when": "notebookCellHasOutputs && notebookCellListFocused && notebookOutputFocused && !inputFocus"
  },
  {
    "key": "ctrl+shift+enter",
    "command": "notebook.cell.insertCodeCellAbove",
    "when": "notebookCellListFocused && !inputFocus && !vim.active"
  },
  {
    "key": "ctrl+shift+enter",
    "command": "-notebook.cell.insertCodeCellAbove",
    "when": "notebookCellListFocused && !inputFocus"
  },
  {
    "key": "ctrl+shift+j",
    "command": "list.expandSelectionDown",
    "when": "listFocus && listSupportsMultiselect && !inputFocus && vim.active"
  },
  {
    "key": "ctrl+shift+k",
    "command": "list.expandSelectionUp",
    "when": "listFocus && listSupportsMultiselect && !inputFocus && vim.active"
  },
  {
    "key": "shift+v",
    "command": "list.selectAll",
    "when": "listFocus && listSupportsMultiselect && !inputFocus && vim.active"
  },
  {
    "key": "v",
    "command": "list.toggleSelection",
    "when": "listFocus && !inputFocus && vim.active"
  },
  {
    "key": "alt+h",
    "command": "git.viewFileHistory",
    "when": "!vim.active"
  },
  {
    "key": "alt+h",
    "command": "-git.viewFileHistory"
  },
  {
    "key": "alt+oem_1",
    "command": "toggle.diff.renderSideBySide",
    "when": "textCompareEditorVisible"
  },
  {
    "key": "ctrl+oem_1",
    "command": "git.openChange",
    "when": "editorFocus && !isInDiffEditor"
  },
  {
    "key": "ctrl+shift+oem_1",
    "command": "git.openFile",
    "when": "editorFocus && isInDiffEditor"
  },
  {
    "key": "ctrl+shift+k",
    "command": "editor.action.deleteLines",
    "when": "textInputFocus && !editorReadonly && !vim.active"
  },
  {
    "key": "ctrl+shift+k",
    "command": "-editor.action.deleteLines",
    "when": "textInputFocus && !editorReadonly"
  },
  {
    "key": "ctrl+shift+j",
    "command": "workbench.action.compareEditor.nextChange",
    "when": "textCompareEditorActive && textCompareEditorVisible && !terminalFocus"
  },
  {
    "key": "ctrl+shift+k",
    "command": "workbench.action.compareEditor.previousChange",
    "when": "textCompareEditorActive && textCompareEditorVisible && !terminalFocus"
  },
  {
    "key": "ctrl+alt+j",
    "command": "workbench.action.terminal.resizePaneDown",
    "when": "terminalFocus"
  },
  {
    "key": "ctrl+alt+k",
    "command": "workbench.action.terminal.resizePaneUp",
    "when": "terminalFocus"
  },
  {
    "key": "ctrl+n",
    "command": "explorer.newFile",
    "when": "filesExplorerFocus"
  },
  {
    "key": "i",
    "command": "notebook.cell.edit",
    "when": "notebookCellListFocused && notebookEditable && !editorHoverFocused && !inputFocus"
  },
  {
    "key": "ctrl+oem_comma",
    "command": "workbench.action.focusSideBar",
    "when": "sideBarVisible && !sideBarFocus && focusedView != 'aws.AmazonQChatView' && focusedView != 'gitlens.views.commitDetails' && focusedView != 'github:createPullRequestWebview'"
  },
  {
    "key": "shift+z shift+z",
    "command": "workbench.action.closeActiveEditor",
    "when": "!inputFocus"
  },
  {
    "key": "ctrl+shift+n",
    "command": "-workbench.action.newWindow"
  },
  {
    "key": "ctrl+shift+n",
    "command": "explorer.newFolder",
    "when": "filesExplorerFocus"
  },
  {
    "key": "ctrl+alt+c",
    "command": "openInIntegratedTerminal",
    "when": "editorFocus && vim.active"
  },
  {
    "key": "alt+x",
    "command": "rust-analyzer.run",
    "when": "editorFocus && editorLangId == rust"
  },
  {
    "key": "g g",
    "command": "editor.action.goToTopHover",
    "when": "editorHoverFocused && vim.active"
  },
  {
    "key": "shift+g",
    "command": "editor.action.goToBottomHover",
    "when": "editorHoverFocused && vim.active"
  },
  {
    "key": "ctrl+m",
    "command": "toggleSuggestionFocus",
    "when": "suggestWidgetVisible && textInputFocus"
  },
  {
    "key": "ctrl+shift+k",
    "command": "selectPrevPageSuggestion",
    "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus || suggestWidgetVisible && textInputFocus && !suggestWidgetHasFocusedSuggestion"
  },
  {
    "key": "ctrl+shift+j",
    "command": "selectNextPageSuggestion",
    "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus || suggestWidgetVisible && textInputFocus && !suggestWidgetHasFocusedSuggestion"
  },
  {
    "key": "ctrl+f4",
    "command": "workbench.action.terminal.kill",
    "when": "terminalFocus"
  },
  {
    "key": "ctrl+shift+n",
    "command": "workbench.action.terminal.moveIntoNewWindow",
    "when": "panelFocus && terminalFocus"
  },
  {
    "key": "ctrl+shift+n",
    "command": "workbench.action.moveEditorToNewWindow",
    "when": "!isAuxiliaryWindowFocusedContext && !sideBarFocus && !terminalFocus"
  },
  {
    "key": "ctrl+shift+n",
    "command": "workbench.action.restoreEditorsToMainWindow",
    "when": "isAuxiliaryWindowFocusedContext && !terminalFocus && !sideBarFocus"
  },
  {
    "key": "ctrl+c",
    "command": "extension.vim_ctrl+c",
    "when": "editorTextFocus && vim.active && vim.overrideCtrlC && vim.use<C-c> && !inDebugRepl && !panelFocus"
  },
  {
    "key": "ctrl+c",
    "command": "-extension.vim_ctrl+c",
    "when": "editorTextFocus && vim.active && vim.overrideCtrlC && vim.use<C-c> && !inDebugRepl"
  },
  {
    "key": "ctrl+l",
    "command": "workbench.action.closeQuickOpen",
    "when": "inQuickOpen"
  },
  {
    "key": "ctrl+shift+i",
    "command": "workbench.action.showAllSymbols",
    "when": "vim.active"
  },
  {
    "key": "ctrl+j",
    "command": "github.copilot.nextPanelSolution",
    "when": "github.copilot.activated && github.copilot.panelVisible"
  },
  {
    "key": "ctrl+k",
    "command": "github.copilot.previousPanelSolution",
    "when": "github.copilot.activated && github.copilot.panelVisible"
  },
  {
    "key": "ctrl+enter",
    "command": "github.copilot.acceptCursorPanelSolution",
    "when": "github.copilot.activated && github.copilot.panelVisible"
  },
  {
    "key": "ctrl+shift+m",
    "command": "workbench.actions.view.problems",
    "when": "workbench.panel.markers.view.active && !vim.active"
  },
  {
    "key": "ctrl+shift+m",
    "command": "-workbench.actions.view.problems",
    "when": "workbench.panel.markers.view.active"
  },
  {
    "key": "ctrl+shift+m e",
    "command": "github.copilot.interactiveEditor.explain",
    "when": "editorFocus"
  },
  {
    "key": "ctrl+shift+m oem_comma",
    "command": "workbench.panel.chat.view.copilot.focus"
  },
  {
    "key": "ctrl+shift+m q",
    "command": "workbench.action.openQuickChat.copilot"
  },
  {
    "key": "ctrl+n",
    "command": "workbench.action.chat.copilot.openInWindow",
    "when": "inChat && sideBarFocus && !vim.active"
  },
  {
    "key": "ctrl+shift+j",
    "command": "workbench.action.chat.nextCodeBlock",
    "when": "chatIsEnabled && inChat"
  },
  {
    "key": "ctrl+shift+m h",
    "command": "workbench.action.chat.copilot.history"
  },
  {
    "key": "ctrl+shift+i",
    "command": "workbench.action.quickchat.toggle",
    "when": "hasChatProvider && !vim.active"
  },
  {
    "key": "ctrl+shift+i",
    "command": "-workbench.action.quickchat.toggle",
    "when": "hasChatProvider"
  },
  {
    "key": "ctrl+p",
    "command": "inlineChat.previousFromHistory",
    "when": "inlineChatFocused && inlineChatHasProvider"
  },
  {
    "key": "ctrl+shift+m ctrl+shift+m",
    "command": "inlineChat.start",
    "when": "editorFocus && inlineChatHasProvider && !editorReadonly"
  },
  {
    "key": "ctrl+n",
    "command": "inlineChat.nextFromHistory",
    "when": "inlineChatFocused && inlineChatHasProvider"
  },
  {
    "key": "ctrl+l",
    "command": "inlineChat.cancel",
    "when": "inlineChatHasProvider && inlineChatVisible"
  },
  {
    "key": "ctrl+l",
    "command": "inlineChat.discard",
    "when": "inlineChatHasProvider && inlineChatVisible && !inlineChatUserDidEdit"
  },
  {
    "key": "ctrl+shift+m f",
    "command": "github.copilot.interactiveEditor.fix"
  },
  {
    "key": "ctrl+r",
    "command": "inlineChat.regenerate",
    "when": "inlineChatHasProvider && inlineChatVisible"
  },
  {
    "key": "ctrl+oem_plus",
    "command": "editor.action.fontZoomIn",
    "when": "editorFocus"
  },
  {
    "key": "ctrl+oem_plus",
    "command": "-workbench.action.zoomIn"
  },
  {
    "key": "ctrl+oem_minus",
    "command": "-workbench.action.zoomOut"
  },
  {
    "key": "ctrl+oem_minus",
    "command": "editor.action.fontZoomOut",
    "when": "editorFocus"
  },
  {
    "key": "ctrl+shift+p",
    "command": "workbench.action.quickOpenNavigatePreviousInFilePicker",
    "when": "inFilesPicker && inQuickOpen && !vim.active"
  },
  {
    "key": "ctrl+shift+p",
    "command": "-workbench.action.quickOpenNavigatePreviousInFilePicker",
    "when": "inFilesPicker && inQuickOpen"
  },
  {
    "key": "ctrl+p",
    "command": "workbench.action.quickOpenNavigateNextInFilePicker",
    "when": "inFilesPicker && inQuickOpen && !vim.active"
  },
  {
    "key": "ctrl+p",
    "command": "-workbench.action.quickOpenNavigateNextInFilePicker",
    "when": "inFilesPicker && inQuickOpen"
  },
  {
    "key": "ctrl+n",
    "command": "editor.action.inlineSuggest.showNext",
    "when": "inlineSuggestionVisible && !editorReadonly"
  },
  {
    "key": "ctrl+p",
    "command": "editor.action.inlineSuggest.showPrevious",
    "when": "inlineSuggestionVisible && !editorReadonly"
  },
  {
    "key": "shift+alt+l",
    "command": "editor.action.inlineSuggest.acceptNextWord",
    "when": "inlineSuggestionVisible && vim.active && !editorReadonly && vim.mode == 'Insert'"
  },
  {
    "key": "ctrl+p",
    "command": "workbench.action.quickOpen",
    "when": "!inlineSuggestionVisible && !terminalFocus && vim.mode != 'SearchInProgressMode' && vim.mode != 'CommandlineInProgress'"
  },
  {
    "key": "ctrl+p",
    "command": "-workbench.action.quickOpen"
  },
  {
    "key": "shift+z shift+q",
    "command": "workbench.action.closeActiveEditor",
    "when": "!inputFocus"
  },
  {
    "key": "ctrl+oem_comma",
    "command": "workbench.action.toggleSidebarVisibility",
    "when": "filesExplorerFocus || openEditorsFocus"
  },
  {
    "key": "shift+alt+k",
    "command": "workbench.action.terminal.selectToPreviousLine"
  },
  {
    "key": "shift+alt+j",
    "command": "workbench.action.terminal.selectToNextLine"
  },
  {
    "key": "ctrl+alt+oem_period",
    "command": "editor.action.marker.next",
    "when": "editorFocus"
  },
  {
    "key": "ctrl+alt+oem_comma",
    "command": "editor.action.marker.prev",
    "when": "editorFocus"
  },
  {
    "key": "ctrl+shift+m t",
    "command": "github.copilot.interactiveEditor.generateTests"
  },
  {
    "key": "ctrl+shift+m d",
    "command": "github.copilot.interactiveEditor.generateDocs"
  },
  {
    "key": "ctrl+shift+oem_1",
    "command": "pr.openDiffViewFromEditor",
    "when": "editorFocus && github:activePullRequest.active && github:activePullRequest.visible && !isInDiffEditor"
  },
  {
    "key": "ctrl+shift+u",
    "command": "workbench.action.output.toggleOutput",
    "when": "workbench.panel.output.active"
  },
  {
    "key": "ctrl+shift+u",
    "command": "-workbench.action.output.toggleOutput",
    "when": "workbench.panel.output.active"
  },
  {
    "key": "ctrl+oem_1",
    "command": "git.openFile",
    "when": "editorFocus && isInDiffEditor"
  },
  {
    "key": "ctrl+shift+oem_1",
    "command": "breadcrumbs.focus",
    "when": "breadcrumbsPossible && breadcrumbsVisible && !vim.active"
  },
  {
    "key": "ctrl+shift+oem_1",
    "command": "-breadcrumbs.focus",
    "when": "breadcrumbsPossible && breadcrumbsVisible"
  },
  {
    "key": "ctrl+oem_plus",
    "command": "workbench.action.zoomIn",
    "when": "!editorFocus && !terminalFocus"
  },
  {
    "key": "ctrl+shift+oem_plus",
    "command": "-workbench.action.zoomIn"
  },
  {
    "key": "ctrl+oem_minus",
    "command": "workbench.action.zoomOut",
    "when": "!editorFocus && !terminalFocus"
  },
  {
    "key": "ctrl+shift+oem_minus",
    "command": "-workbench.action.zoomOut"
  },
  {
    "key": "alt+oem_plus",
    "command": "workbench.action.zoomIn"
  },
  {
    "key": "alt+oem_minus",
    "command": "workbench.action.zoomOut"
  },
  {
    "key": "ctrl+shift+j",
    "command": "runCommands",
    "when": "mergeConflictsCount > 0 && !editorReadonly",
    "args": {
      "commands": [
        "merge-conflict.next",
        {
          "command": "vim.remap",
          "args": {
            "after": [
              "H",
              "L",
            ]
          },
        },
      ]
    }
  },
  {
    "key": "ctrl+shift+k",
    "command": "runCommands",
    "when": "mergeConflictsCount > 0 && !editorReadonly",
    "args": {
      "commands": [
        "merge-conflict.previous",
        {
          "command": "vim.remap",
          "args": {
            "after": [
              "L",
              "H",
            ]
          },
        },
      ]
    }
  },
  {
    "key": "ctrl+n",
    "command": "workbench.action.files.newUntitledFile",
    "when": "!vim.active"
  },
  {
    "key": "ctrl+n",
    "command": "-workbench.action.files.newUntitledFile"
  },
  {
    "key": "ctrl+n",
    "command": "history.showNext",
    "when": "historyNavigationWidgetFocus && !isComposing && !suggestWidgetVisible && (historyNavigationBackwardsEnabled || inChat)"
  },
  {
    "key": "ctrl+p",
    "command": "history.showPrevious",
    "when": "historyNavigationWidgetFocus && !isComposing && !suggestWidgetVisible && (historyNavigationBackwardsEnabled || inChat)"
  },
  {
    "key": "ctrl+l",
    "command": "expandLineSelection",
    "when": "textInputFocus && !vim.active"
  },
  {
    "key": "ctrl+l",
    "command": "-expandLineSelection",
    "when": "textInputFocus"
  },
  {
    "key": "ctrl+0",
    "command": "workbench.action.focusSideBar",
    "when": "!vim.active"
  },
  {
    "key": "ctrl+0",
    "command": "-workbench.action.focusSideBar"
  },
  {
    "key": "ctrl+0",
    "command": "editor.action.fontZoomReset",
    "when": "editorFocus"
  },
  {
    "key": "alt+0",
    "command": "workbench.action.zoomReset"
  },
  {
    "key": "alt+0",
    "command": "-workbench.action.lastEditorInGroup"
  },
  {
    "key": "ctrl+h",
    "command": "workbench.action.focusPreviousGroup",
    "when": "vim.active && !textCompareEditorActive && !terminalFocus"
  },
  {
    "key": "ctrl+oem_5",
    "command": "-workbench.action.splitEditor"
  },
  {
    "key": "ctrl+0",
    "command": "workbench.action.zoomReset",
    "when": "!editorFocus && !terminalFocus"
  },
  {
    "key": "ctrl+l",
    "command": "cancelRenameInput",
    "when": "editorFocus && renameInputVisible"
  },
  {
    "key": "ctrl+shift+h",
    "command": "merge-conflict.accept.current",
    "when": "mergeConflictsCount > 0"
  },
  {
    "key": "ctrl+shift+l",
    "command": "merge-conflict.accept.incoming",
    "when": "mergeConflictsCount > 0"
  },
  {
    "key": "ctrl+shift+enter",
    "command": "merge-conflict.accept.both",
    "when": "mergeConflictsCount > 0"
  },
  {
    "key": "ctrl+oem_minus",
    "command": "workbench.action.terminal.fontZoomOut",
    "when": "terminalFocus"
  },
  {
    "key": "ctrl+oem_plus",
    "command": "workbench.action.terminal.fontZoomIn",
    "when": "terminalFocus"
  },
  {
    "key": "ctrl+0",
    "command": "workbench.action.terminal.fontZoomReset",
    "when": "terminalFocus"
  },
  {
    "key": "ctrl+shift+c",
    "command": "workbench.panel.comments"
  },
  {
    "key": "ctrl+shift+k",
    "command": "workbench.action.chat.previousCodeBlock",
    "when": "chatIsEnabled && inChat"
  },
  {
    "key": "ctrl+shift+7",
    "command": "workbench.action.quickTextSearch"
  },
  {
    "key": "ctrl+shift+n",
    "command": "workbench.action.terminal.moveToTerminalPanel",
    "when": "terminalFocus && !panelFocus"
  },
  {
    "key": "ctrl+l",
    "command": "notebook.cell.quitEdit",
    "when": "inputFocus && notebookEditorFocused && vim.active && !editorHasSelection && !editorHoverVisible && vim.mode == 'Normal'"
  },
  {
    "key": "shift+f4",
    "command": "workbench.action.closeEditorsInGroup"
  },
  {
    "key": "ctrl+j",
    "command": "focusNextRenameSuggestion",
    "when": "renameInputVisible"
  },
  {
    "key": "ctrl+k",
    "command": "focusPreviousRenameSuggestion",
    "when": "renameInputVisible"
  },
  {
    "key": "ctrl+shift+m ctrl+shift+m",
    "command": "workbench.action.terminal.chat.start",
    "when": "inlineChatHasProvider && terminalFocusInAny && terminalHasBeenCreated || inlineChatHasProvider && terminalFocusInAny && terminalProcessSupported"
  },
  {
    "key": "ctrl+i",
    "command": "-workbench.action.terminal.chat.start",
    "when": "inlineChatHasProvider && terminalFocusInAny && terminalHasBeenCreated || inlineChatHasProvider && terminalFocusInAny && terminalProcessSupported"
  },
  {
    "key": "ctrl+l",
    "command": "workbench.action.terminal.chat.close",
    "when": "terminalChatFocus && terminalChatVisible"
  },
  {
    "key": "ctrl+shift+m e",
    "command": "github.copilot.terminal.explainTerminalLastCommand",
    "when": "terminalFocus"
  },
  {
    "key": "ctrl+shift+m ctrl+shift+n",
    "command": "workbench.action.chat.openInEditor"
  },
  {
    "key": "ctrl+enter",
    "command": "search.action.replace",
    "when": "isEditableItem && matchFocus && replaceActive && searchViewletVisible"
  },
  {
    "key": "ctrl+shift+1",
    "command": "-search.action.replace",
    "when": "isEditableItem && matchFocus && replaceActive && searchViewletVisible"
  },
  {
    "key": "ctrl+alt+oem_1",
    "command": "gitlens.diffWithRevision"
  },
  {
    "key": "ctrl+alt+p",
    "command": "gitlens.openFileRevision"
  },
  {
    "key": "alt+oem_2",
    "command": "gitlens.gitCommands",
    "when": "terminalFocus"
  },
  {
    "key": "alt+oem_2",
    "command": "gitlens.gitCommands",
    "when": "!gitlens:disabled && config.gitlens.keymap == 'alternate'"
  },
  {
    "key": "ctrl+l",
    "command": "editor.closeTypeHierarchy",
    "when": "typeHierarchyVisible && !config.editor.stablePeek"
  },
  {
    "key": "ctrl+l",
    "command": "editor.closeCallHierarchy",
    "when": "callHierarchyVisible && !config.editor.stablePeek"
  },
  {
    "key": "g h",
    "command": "editor.showIncomingCalls",
    "when": "callHierarchyVisible && callHierarchyDirection == 'outgoingCalls'"
  },
  {
    "key": "g h",
    "command": "editor.showOutgoingCalls",
    "when": "callHierarchyVisible && callHierarchyDirection == 'incomingCalls'"
  },
  {
    "key": "g h",
    "command": "editor.showSubtypes",
    "when": "typeHierarchyVisible && typeHierarchyDirection == 'supertypes'"
  },
  {
    "key": "g h",
    "command": "editor.showSupertypes",
    "when": "typeHierarchyVisible && typeHierarchyDirection == 'subtypes'"
  },
  {
    "key": "ctrl+f4",
    "command": "workbench.action.terminal.killEditor",
    "when": "terminalEditorFocus && terminalFocus && terminalHasBeenCreated || terminalEditorFocus && terminalFocus && terminalProcessSupported"
  },
  {
    "key": "ctrl+w",
    "command": "-workbench.action.terminal.killEditor",
    "when": "terminalEditorFocus && terminalFocus && terminalHasBeenCreated || terminalEditorFocus && terminalFocus && terminalProcessSupported"
  },
  {
    "key": "ctrl+w",
    "command": "-workbench.action.closeActiveEditor"
  },
  {
    "key": "ctrl+f4",
    "command": "workbench.action.closeGroup",
    "when": "activeEditorGroupEmpty && multipleEditorGroups"
  },
  {
    "key": "ctrl+w",
    "command": "-workbench.action.closeGroup",
    "when": "activeEditorGroupEmpty && multipleEditorGroups"
  },
  {
    "key": "ctrl+l",
    "command": "vim.remap",
    "when": "vim.mode == 'EasyMotionMode' || vim.mode == 'EasyMotionInputMode'",
    "args": {
      "after": [
        "<Esc>",
      ]
    }
  },
  {
    "key": "ctrl+l",
    "command": "extension.vim_navigateCtrlL",
    "when": "!panelFocus && editorTextFocus && vim.active && vim.use<C-l> && !inDebugRepl && vim.mode != 'EasyMotionMode' && vim.mode != 'EasyMotionInputMode'"
  },
  {
    "key": "ctrl+l",
    "command": "-extension.vim_navigateCtrlL",
    "when": "editorTextFocus && vim.active && vim.use<C-l> && !inDebugRepl"
  },
  {
    "key": "ctrl+shift+z",
    "command": "workbench.action.toggleZenMode",
    "when": "!isAuxiliaryWindowFocusedContext"
  },
  {
    "key": "ctrl+k z",
    "command": "-workbench.action.toggleZenMode",
    "when": "!isAuxiliaryWindowFocusedContext"
  },
  {
    "key": "ctrl+l",
    "command": "search.action.cancel",
    "when": "listFocus && searchViewletVisible && !inputFocus && !treestickyScrollFocused && searchState != '0'"
  },
  {
    "key": "ctrl+l",
    "command": "closeFindWidget",
    "when": "editorFocus && findWidgetVisible && !isComposing"
  },
  {
    "key": "ctrl+enter",
    "command": "comments.reply",
    "when": "focusedView == 'workbench.panel.comments'"
  },
  {
    "key": "ctrl+alt+d",
    "command": "workbench.action.addComment"
  },
  {
    "key": "ctrl+l",
    "command": "workbench.action.hideComment",
    "when": "commentEditorFocused && vim.mode == 'Normal'"
  },
  {
    "key": "ctrl+shift+alt+c",
    "command": "workbench.action.toggleCommenting"
  },
  // doesn't seem to work, but I'll keep it in in case it starts working at some point
  {
    "key": "ctrl+alt+u",
    "command": "git.unstageSelectedRanges",
    "when": "editorTextFocus"
  },
  // VSCode's forward/backward navigation using Alt+I/O (Vim's one is still Ctrl + I/O and usually better)
  {
    "key": "alt+o",
    "command": "workbench.action.navigateBack",
    "when": "canNavigateBack && vim.active"
  },
  {
    "key": "alt+i",
    "command": "workbench.action.navigateForward",
    "when": "canNavigateForward && vim.active"
  },
  // this is an inferior alternative to <C-u>/<C-d> which also works when some code is folded
  {
    "key": "shift+alt+u",
    "command": "vim.remap",
    "when": "editorTextFocus && (vim.mode == 'Normal' || vim.mode == 'Visual' || vim.mode == 'VisualLine')",
    "args": {
      "after": [
        "H",
        "z",
        "z",
      ]
    }
  },
  {
    "key": "shift+alt+d",
    "command": "vim.remap",
    "when": "editorTextFocus && (vim.mode == 'Normal' || vim.mode == 'Visual' || vim.mode == 'VisualLine')",
    "args": {
      "after": [
        "L",
        "z",
        "z",
      ]
    }
  },
  {
    "key": "ctrl+shift+alt+oem_1",
    "command": "git.viewStagedChanges"
  },
  // the below is commented out because it just feels more natural to be able to tab the suggestion into existence
  // // use Enter for inserting snippets/intellisense suggestions (not Tab!), use Tab for AI auto-completions or snippet placeholder moves
  // {
  //   "key": "tab",
  //   "command": "-acceptSelectedSuggestion",
  //   "when": "suggestWidgetHasFocusedSuggestion && suggestWidgetVisible && textInputFocus"
  // },
  {
    "key": "alt+e",
    "command": "errorLens.toggle"
  },
  {
    "key": "ctrl+alt+u",
    "command": "git.unstage",
    "when": "focusedView == 'workbench.scm'"
  },
  {
    "key": "ctrl+shift+l",
    "command": "git.stage",
    "when": "focusedView == 'workbench.scm'"
  },
  {
    "key": "ctrl+shift+h",
    "command": "git.clean",
    "when": "focusedView == 'workbench.scm'"
  },
  {
    "key": "ctrl+oem_3",
    "command": "workbench.action.terminal.toggleTerminal",
    "when": "terminal.active && !(panelVisible && !panelFocus)"
  },
  {
    "key": "ctrl+oem_3",
    "command": "-workbench.action.terminal.toggleTerminal",
    "when": "terminal.active"
  },
  {
    "key": "ctrl+oem_3",
    "command": "workbench.action.focusPanel",
    "when": "panelVisible && !panelFocus"
  },
  {
    "key": "shift+alt+oem_1",
    "command": "gitlens.compareWorkingWith"
  },
  {
    "key": "alt+p",
    "command": "workbench.view.extension.github-pull-request"
  },
  {
    "key": "alt+m",
    "command": "runCommands",
    "when": "resourcePath not in 'github:viewedFiles' && editorFocus",
    "args": {
      "commands": [
        "pr.markFileAsViewed",
        "workbench.action.focusSideBar",
      ]
    }
  },
  {
    "key": "alt+m",
    "command": "pr.unmarkFileAsViewed",
    "when": "resourcePath in 'github:viewedFiles' && editorFocus"
  },
  {
    "key": "alt+z",
    "command": "workbench.action.toggleCenteredLayout"
  },
  {
    "key": "escape escape",
    "command": "-workbench.action.exitZenMode",
    "when": "inZenMode"
  },
  {
    "key": "ctrl+shift+j",
    "command": "workbench.scm.action.focusNextInput",
    "when": "focusedView == 'workbench.scm'"
  },
  {
    "key": "ctrl+shift+k",
    "command": "workbench.scm.action.focusPreviousInput",
    "when": "focusedView == 'workbench.scm'"
  },
  {
    "key": "ctrl+j",
    "command": "workbench.scm.action.focusNextResourceGroup",
    "when": "focusedView == 'workbench.scm'"
  },
  {
    "key": "ctrl+k",
    "command": "workbench.scm.action.focusPreviousResourceGroup",
    "when": "focusedView == 'workbench.scm'"
  },
  {
    "key": "ctrl+shift+j",
    "command": "search.focus.nextInputBox",
    "when": "inSearchEditor && inputBoxFocus || inputBoxFocus && searchViewletVisible"
  },
  {
    "key": "ctrl+shift+k",
    "command": "search.focus.previousInputBox",
    "when": "inSearchEditor && inputBoxFocus || inputBoxFocus && searchViewletVisible && !searchInputBoxFocus"
  },
  {
    "key": "alt+n",
    "command": "search.action.focusNextSearchResult",
    "when": "hasSearchResult || inSearchEditor"
  },
  {
    "key": "shift+alt+n",
    "command": "search.action.focusPreviousSearchResult",
    "when": "hasSearchResult || inSearchEditor"
  },
  {
    "key": "ctrl+7",
    "command": "workbench.action.chat.attachContext",
    "when": "inChatInput"
  },
  {
    "key": "ctrl+oem_2",
    "command": "-workbench.action.chat.attachContext",
    "when": "inChatInput"
  },
  {
    "key": "ctrl+m",
    "command": "quickInput.acceptInBackground",
    "when": "cursorAtEndOfQuickInputBox && inQuickInput && quickInputType == 'quickPick' || inQuickInput && !inputFocus && quickInputType == 'quickPick'"
  },
  {
    "key": "ctrl+g",
    "command": "quickInput.first",
    "when": "inQuickInput && quickInputType == 'quickPick'"
  },
  {
    "key": "ctrl+shift+j",
    "command": "quickInput.nextSeparatorWithQuickAccessFallback",
    "when": "inQuickInput && quickInputType == 'quickPick'"
  },
  {
    "key": "ctrl+shift+k",
    "command": "quickInput.previousSeparatorWithQuickAccessFallback",
    "when": "inQuickInput && quickInputType == 'quickPick'"
  },
  {
    "key": "ctrl+u",
    "command": "quickInput.pagePrevious",
    "when": "inQuickInput && quickInputType == 'quickPick'"
  },
  {
    "key": "ctrl+d",
    "command": "quickInput.pageNext",
    "when": "inQuickInput && quickInputType == 'quickPick'"
  },
  {
    "key": "ctrl+shift+g",
    "command": "quickInput.last",
    "when": "inQuickInput && quickInputType == 'quickPick'"
  },
  {
    "key": "ctrl+shift+m c",
    "command": "github.copilot.chat.attachSelection",
    "when": "vim.mode == 'Visual' || vim.mode == 'VisualLine'"
  },
  {
    "key": "ctrl+shift+m c",
    "command": "github.copilot.chat.attachFile",
    "when": "vim.mode != 'Visual' && vim.mode != 'VisualLine'"
  },
  {
    "key": "ctrl+shift+m c",
    "command": "inlineChat.viewInChat",
    "when": "inlineChatHasProvider && inlineChatVisible"
  },
  {
    "key": "ctrl+alt+h",
    "command": "workbench.action.decreaseViewSize",
    "when": "vim.active && !panelFocus && !sideBarFocus && !terminalFocus"
  },
  {
    "key": "ctrl+alt+l",
    "command": "workbench.action.increaseViewSize",
    "when": "vim.active && !panelFocus && !sideBarFocus && !terminalFocus"
  },
  {
    "key": "ctrl+shift+a",
    "command": "workbench.view.extension.azure"
  },
  {
    "key": "shift+alt+a",
    "command": "-workbench.view.extension.azure"
  },
  {
    "key": "ctrl+alt+s",
    "command": "git.stashStaged"
  },
  {
    "key": "shift+alt+y",
    "command": "issue.copyGithubPermalink"
  },
  {
    "key": "ctrl+shift+m ctrl+shift+oem_comma",
    "command": "workbench.panel.chat.view.copilot.focus"
  },
  {
    "key": "ctrl+shift+m e",
    "command": "github.copilot.chat.explain"
  },
  {
    "key": "ctrl+shift+oem_7 1",
    "command": "vscode-harpoon.addEditor1"
  },
  {
    "key": "ctrl+shift+oem_7 ctrl+shift+oem_7",
    "command": "vscode-harpoon.addEditor"
  },
  {
    "key": "ctrl+shift+oem_7 2",
    "command": "vscode-harpoon.addEditor2"
  },
  {
    "key": "ctrl+shift+oem_7 3",
    "command": "vscode-harpoon.addEditor3"
  },
  {
    "key": "ctrl+shift+oem_7 4",
    "command": "vscode-harpoon.addEditor4"
  },
  {
    "key": "ctrl+shift+oem_7 5",
    "command": "vscode-harpoon.addEditor5"
  },
  {
    "key": "ctrl+shift+oem_7 6",
    "command": "vscode-harpoon.addEditor6"
  },
  {
    "key": "ctrl+shift+oem_7 7",
    "command": "vscode-harpoon.addEditor7"
  },
  {
    "key": "ctrl+shift+oem_7 8",
    "command": "vscode-harpoon.addEditor8"
  },
  {
    "key": "ctrl+shift+oem_7 9",
    "command": "vscode-harpoon.addEditor9"
  },
  {
    "key": "ctrl+oem_7 1",
    "command": "vscode-harpoon.gotoEditor1"
  },
  {
    "key": "ctrl+oem_7 2",
    "command": "vscode-harpoon.gotoEditor2"
  },
  {
    "key": "ctrl+oem_7 3",
    "command": "vscode-harpoon.gotoEditor3"
  },
  {
    "key": "ctrl+oem_7 4",
    "command": "vscode-harpoon.gotoEditor4"
  },
  {
    "key": "ctrl+oem_7 5",
    "command": "vscode-harpoon.gotoEditor5"
  },
  {
    "key": "ctrl+oem_7 6",
    "command": "vscode-harpoon.gotoEditor6"
  },
  {
    "key": "ctrl+oem_7 7",
    "command": "vscode-harpoon.gotoEditor7"
  },
  {
    "key": "ctrl+oem_7 8",
    "command": "vscode-harpoon.gotoEditor8"
  },
  {
    "key": "ctrl+oem_7 9",
    "command": "vscode-harpoon.gotoEditor9"
  },
  {
    "key": "ctrl+oem_7 oem_7",
    "command": "vscode-harpoon.editEditors"
  },
  {
    "key": "ctrl+oem_7 ctrl+o",
    "command": "vscode-harpoon.gotoPreviousHarpoonEditor"
  },
  {
    "key": "ctrl+oem_7 ctrl+oem_7",
    "command": "vscode-harpoon.editorQuickPick"
  },
  {
    "key": "ctrl+oem_7 o",
    "command": "vscode-harpoon.gotoPreviousHarpoonEditor"
  },
  {
    "key": "ctrl+o",
    "command": "workbench.action.files.openFile",
    "when": "!vim.active"
  },
  {
    "key": "ctrl+o",
    "command": "-workbench.action.files.openFile",
    "when": "true"
  },
  {
    "key": "ctrl+shift+alt+oem_period",
    "command": "editor.action.marker.nextInFiles",
    "when": "editorFocus"
  },
  {
    "key": "ctrl+shift+alt+oem_comma",
    "command": "editor.action.marker.prevInFiles",
    "when": "editorFocus"
  },
  {
    "key": "alt+w",
    "command": "editor.debug.action.selectionToWatch"
  },
]