// Place your key bindings in this file to override the defaultsauto[]
[
  {
    "key": "ctrl+shift+c",
    "command": "-workbench.action.terminal.openNativeConsole",
    "when": "!terminalFocus"
  },
  {
    "key": "ctrl+shift+c",
    "command": "editor.action.commentLine",
    "when": "editorTextFocus && !editorReadonly && !vim.active"
  },
  {
    "key": "ctrl+oem_2",
    "command": "-editor.action.commentLine",
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "key": "ctrl+u",
    "command": "editor.action.transformToUppercase",
    "when": "!vim.active"
  },
  {
    "key": "ctrl+shift+z",
    "command": "cursorUndo",
    "when": "textInputFocus && !vim.active"
  },
  {
    "key": "ctrl+u",
    "command": "-cursorUndo",
    "when": "textInputFocus"
  },
  {
    "key": "ctrl+shift+z",
    "command": "-redo"
  },
  {
    "key": "ctrl+shift+y",
    "command": "cursorRedo",
    "when": "!vim.active"
  },
  {
    "key": "ctrl+l",
    "command": "editor.action.transformToLowercase",
    "when": "!vim.active"
  },
  {
    "key": "ctrl+shift+a",
    "command": "workbench.action.tasks.runTask",
    "args": "pytest"
  },
  {
    "key": "ctrl+z",
    "command": "undo",
    "when": "!vim.active || vim.mode == 'Insert'"
  },
  {
    "key": "ctrl+z",
    "command": "-undo"
  },
  {
    "key": "ctrl+y",
    "command": "redo",
    "when": "!vim.active || vim.mode == 'Insert'"
  },
  {
    "key": "ctrl+y",
    "command": "-redo"
  },
  {
    "key": "ctrl+7",
    "command": "editor.action.commentLine",
    "when": "editorTextFocus && !editorReadonly && vim.active"
  },
  {
    "key": "alt+k",
    "command": "editor.action.insertCursorAbove",
    "when": "editorTextFocus && vim.active"
  },
  {
    "key": "alt+j",
    "command": "editor.action.insertCursorBelow",
    "when": "editorTextFocus && vim.active"
  },
  {
    "key": "ctrl+shift+l",
    "command": "git.stageChange", // unfortunately broken...
    "when": "dirtyDiffVisible"
  },
  {
    "key": "ctrl+shift+l",
    "command": "git.stageSelectedRanges", // as a workaround while the above doesn't work. Stage everything within the current selection
    "when": "editorTextFocus"
  },
  {
    "key": "ctrl+h",
    "command": "workbench.action.compareEditor.focusOtherSide"
  },
  {
    "key": "ctrl+shift+h",
    "command": "git.revertChange", // unfortunately broken...
    "when": "dirtyDiffVisible"
  },
  {
    "key": "ctrl+shift+h",
    "command": "git.revertSelectedRanges", // as a workaround while the above doesn't work. Revert everything within the current selection
    "when": "editorTextFocus"
  },
  {
    "key": "ctrl+shift+j",
    "command": "editor.action.dirtydiff.next",
    "when": "editorTextFocus && !textCompareEditorActive"
  },
  {
    "key": "ctrl+shift+k",
    "command": "editor.action.dirtydiff.previous",
    "when": "editorTextFocus && !textCompareEditorActive"
  },
  {
    "key": "ctrl+l",
    "command": "closeDirtyDiff",
    "when": "dirtyDiffVisible && vim.active"
  },
  {
    "key": "shift+escape",
    "command": "-closeDirtyDiff",
    "when": "dirtyDiffVisible"
  },
  {
    "key": "ctrl+alt+f",
    "command": "editor.toggleFold", // NOTE: works in vim using "za"!
    "when": "editorTextFocus && foldingEnabled && vim.active"
  },
  {
    "key": "ctrl+oem_7",
    "command": "workbench.action.toggleMaximizedPanel"
  },
  {
    "key": "ctrl+alt+l",
    "command": "workbench.action.moveEditorToNextGroup",
    "when": "vim.active"
  },
  {
    "key": "ctrl+alt+h",
    "command": "workbench.action.moveEditorToPreviousGroup",
    "when": "vim.active"
  },
  {
    "key": "ctrl+k",
    "command": "selectPrevSuggestion",
    "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus || suggestWidgetVisible && textInputFocus && !suggestWidgetHasFocusedSuggestion && vim.active"
  },
  {
    "key": "ctrl+j",
    "command": "selectNextSuggestion",
    "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus || suggestWidgetVisible && textInputFocus && !suggestWidgetHasFocusedSuggestion && vim.active"
  },
  {
    "key": "ctrl+j",
    "command": "workbench.action.terminal.selectNextSuggestion",
    "when": "terminalFocus && terminalHasBeenCreated && terminalIsOpen && terminalSuggestWidgetVisible || terminalFocus && terminalIsOpen && terminalProcessSupported && terminalSuggestWidgetVisible && vim.active"
  },
  {
    "key": "ctrl+k",
    "command": "workbench.action.terminal.selectPrevSuggestion",
    "when": "terminalFocus && terminalHasBeenCreated && terminalIsOpen && terminalSuggestWidgetVisible || terminalFocus && terminalIsOpen && terminalProcessSupported && terminalSuggestWidgetVisible && vim.active"
  },
  {
    "key": "ctrl+j",
    "command": "selectNextCodeAction",
    "when": "codeActionMenuVisible && vim.active"
  },
  {
    "key": "ctrl+k",
    "command": "selectPrevCodeAction",
    "when": "codeActionMenuVisible && vim.active"
  },
  {
    "key": "alt+f",
    "command": "actions.find",
    "when": "editorFocus || editorIsOpen && vim.active"
  },
  {
    "key": "ctrl+shift+j",
    "command": "workbench.action.terminal.focusNext",
    "when": "terminalFocus && terminalHasBeenCreated && !terminalEditorFocus || terminalFocus && terminalProcessSupported && !terminalEditorFocus"
  },
  {
    "key": "ctrl+shift+k",
    "command": "workbench.action.terminal.focusPrevious",
    "when": "terminalFocus && terminalHasBeenCreated && !terminalEditorFocus || terminalFocus && terminalProcessSupported && !terminalEditorFocus"
  },
  {
    "key": "ctrl+m",
    "command": "editor.action.showHover",
    "when": "editorTextFocus && vim.active && vim.mode != 'SearchInProgressMode'"
  },
  {
    "key": "j",
    "command": "editor.action.scrollDownHover",
    "when": "editorHoverFocused && vim.active"
  },
  {
    "key": "k",
    "command": "editor.action.scrollUpHover",
    "when": "editorHoverFocused && vim.active"
  },
  {
    "key": "l",
    "command": "editor.action.scrollRightHover",
    "when": "editorHoverFocused && vim.active"
  },
  {
    "key": "h",
    "command": "editor.action.scrollLeftHover",
    "when": "editorHoverFocused && vim.active"
  },
  {
    "key": "ctrl+u",
    "command": "editor.action.pageUpHover",
    "when": "editorHoverFocused && vim.active"
  },
  {
    "key": "ctrl+d",
    "command": "editor.action.pageDownHover",
    "when": "editorHoverFocused && vim.active"
  },
  {
    "key": "ctrl+l",
    "command": "workbench.action.focusActiveEditorGroup",
    "when": "!editorTextFocus"
  },
  {
    "key": "ctrl+j",
    "command": "workbench.action.quickOpenSelectNext",
    "when": "inQuickOpen"
  },
  {
    "key": "ctrl+k",
    "command": "workbench.action.quickOpenSelectPrevious",
    "when": "inQuickOpen"
  },
  {
    "key": "ctrl+n",
    "command": "workbench.action.quickOpenNavigateNextInTerminalPicker",
    "when": "terminalFocus && vim.active"
  },
  {
    "key": "ctrl+p",
    "command": "workbench.action.quickOpenNavigatePreviousInTerminalPicker",
    "when": "terminalFocus && vim.active"
  },
  {
    "key": "alt+j",
    "command": "workbench.action.terminal.scrollToNextCommand",
    "when": "terminalFocus && terminalHasBeenCreated && !accessibilityModeEnabled || terminalFocus && terminalProcessSupported && vim.active && !accessibilityModeEnabled"
  },
  {
    "key": "alt+k",
    "command": "workbench.action.terminal.scrollToPreviousCommand",
    "when": "terminalFocus && terminalHasBeenCreated && !accessibilityModeEnabled || terminalFocus && terminalProcessSupported && vim.active && !accessibilityModeEnabled"
  },
  {
    "key": "alt+u",
    "command": "workbench.action.terminal.scrollUpPage",
    "when": "terminalFocusInAny && terminalHasBeenCreated && !terminalAltBufferActive || terminalFocusInAny && terminalProcessSupported && vim.active && !terminalAltBufferActive"
  },
  {
    "key": "alt+d",
    "command": "workbench.action.terminal.scrollDownPage",
    "when": "terminalFocusInAny && terminalHasBeenCreated && !terminalAltBufferActive || terminalFocusInAny && terminalProcessSupported && vim.active && !terminalAltBufferActive"
  },
  {
    "key": "ctrl+k",
    "command": "workbench.action.terminal.scrollUp",
    "when": "terminalFocusInAny && terminalHasBeenCreated && !terminalAltBufferActive || terminalFocusInAny && terminalProcessSupported && !terminalAltBufferActive && vim.active"
  },
  {
    "key": "ctrl+j",
    "command": "workbench.action.terminal.scrollDown",
    "when": "terminalFocusInAny && terminalHasBeenCreated && !terminalAltBufferActive || terminalFocusInAny && terminalProcessSupported && !terminalAltBufferActive && vim.active"
  },
  {
    "key": "ctrl+m",
    "command": "-editor.action.toggleTabFocusMode"
  },
  {
    "key": "alt+d",
    "command": "extension.partialDiff.diffSelectionWithClipboard",
    "when": "editorFocus"
  },
  {
    "key": "ctrl+e",
    "command": "workbench.action.quickOpen",
    "when": "!vim.active"
  },
  {
    "key": "ctrl+e",
    "command": "-workbench.action.quickOpen" // to allow Ctrl + E for going to end of the line in bash
  },
  {
    "key": "alt+o",
    "command": "cursorUndo",
    "when": "textInputFocus && vim.active"
  },
  {
    "key": "alt+i",
    "command": "cursorRedo",
    "when": "vim.active"
  },
  {
    "key": "ctrl+7",
    "command": "workbench.action.terminal.focusFind",
    "when": "terminalFindFocused && terminalHasBeenCreated || terminalFindFocused && terminalProcessSupported || terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported && vim.active"
  },
  {
    "key": "ctrl+f",
    "command": "workbench.action.terminal.focusFind",
    "when": "(terminalFindFocused && terminalHasBeenCreated && !vim.active || terminalFindFocused && terminalProcessSupported && !vim.active || terminalFocus && terminalHasBeenCreated && !vim.active || terminalFocus && terminalProcessSupported) && !vim.active"
  },
  {
    "key": "ctrl+f",
    "command": "-workbench.action.terminal.focusFind",
    "when": "terminalFindFocused && terminalHasBeenCreated || terminalFindFocused && terminalProcessSupported || terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported"
  },
  {
    "key": "ctrl+j",
    "command": "-workbench.action.togglePanel"
  },
  {
    "key": "l",
    "command": "breadcrumbs.focusNextWithPicker",
    "when": "breadcrumbsActive && breadcrumbsVisible && listFocus && !inputFocus"
  },
  {
    "key": "h",
    "command": "breadcrumbs.focusPreviousWithPicker",
    "when": "breadcrumbsActive && breadcrumbsVisible && listFocus && !inputFocus",
  },
  {
    "key": "ctrl+oem_comma",
    "command": "-workbench.action.openSettings"
  },
  {
    "key": "ctrl+shift+oem_comma",
    "command": "workbench.action.toggleSidebarVisibility"
  },
  {
    "key": "ctrl+b",
    "command": "-workbench.action.toggleSidebarVisibility"
  },
  {
    "key": "ctrl+oem_comma",
    "command": "workbench.view.explorer",
    "when": "viewContainer.workbench.view.explorer.enabled"
  },
  {
    "key": "ctrl+shift+e",
    "command": "-workbench.view.explorer",
    "when": "viewContainer.workbench.view.explorer.enabled"
  }
]