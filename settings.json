{
  // Amazon Q / Code Whisperer
  "amazonQ.shareContentWithAWS": false,
  // General
  "cSpell.userWords": [
    "aimet",
    "astype",
    "behaviour",
    "bfill",
    "chdir",
    "coret",
    "creds",
    "customizability",
    "dateutil",
    "DCGM",
    "dcid",
    "dropna",
    "dtype",
    "dtypes",
    "duckdb",
    "fillna",
    "genai",
    "gunicorn",
    "hrefs",
    "htmx",
    "idxs",
    "Iframe",
    "iloc",
    "imread",
    "infile",
    "ints",
    "ipynb",
    "isin",
    "iterrows",
    "jsdelivr",
    "kpis",
    "mddump",
    "mypy",
    "ndarray",
    "ndenumerate",
    "ndim",
    "ndindex",
    "nlevels",
    "numpad",
    "numpy",
    "paramtype",
    "Plotly",
    "Prio",
    "pydantic",
    "pyenv",
    "Pygame",
    "pynput",
    "pyproject",
    "pytest",
    "Referer",
    "reraised",
    "responsibles",
    "rtype",
    "runid",
    "semseg",
    "sharded",
    "socketio",
    "spinup",
    "Tetris",
    "thead",
    "tobytes",
    "topk",
    "tqdm",
    "uids",
    "uncolorable",
    "Undrawable",
    "unfillable",
    "unmark",
    "unstage",
    "vdeep",
    "vectorize",
    "venv",
    "vsintellicode",
    "wasd",
    "wsid",
    "xaxis",
    "yaxis"
  ],
  // * in case we want to disallow compound words, exceptions must be included manually:
  // "cSpell.userWords": [
  //   "codeowners",
  //   "isoparse",
  //   "dateutil",
  //   "readall",
  //   "maxsplit",
  //   "usecase",
  //   "subpages",
  //   "argparser",
  //   "usecases",
  //   "dataframe",
  //   "subcollection",
  //   "Dockerizing",
  //   "dockerized",
  //   "datamanagement",
  //   "diskcache",
  //   "substeps",
  //   "applymap",
  //   "preprocessors",
  //   "justseen",
  // ],
  "[yaml]": {
    "editor.insertSpaces": true,
    "editor.tabSize": 2,
    "editor.autoIndent": "keep",
    "gitlens.codeLens.scopes": [
      "document"
    ],
    "editor.quickSuggestions": {
      "other": true,
      "comments": false,
      "strings": true
    }
  },
  "svg.preview.mode": "img",
  "files.watcherExclude": {
    "**/.*cache/**": true,
    "**/.*venv/**": true,
    "**/.dash/**": true
  },
  "githubPullRequests.pullBranch": "never",
  "workbench.editorAssociations": {
    "*.ipynb": "jupyter-notebook"
  },
  "editor.suggestSelection": "first",
  "vsintellicode.modify.editor.suggestSelection": "automaticallyOverrodeDefaultValue",
  "files.autoSave": "afterDelay",
  "notebook.cellToolbarLocation": {
    "default": "right",
    "jupyter-notebook": "left"
  },
  "redhat.telemetry.enabled": false,
  "jupyter.askForKernelRestart": false,
  "terminal.integrated.defaultProfile.windows": "Ubuntu-20.04 (WSL)",
  "explorer.confirmDragAndDrop": false,
  "terminal.integrated.cursorStyle": "line",
  "notebook.output.textLineLimit": 200,
  "editor.inlineSuggest.enabled": true,
  "github.copilot.enable": {
    "*": true,
    "yaml": false,
    "plaintext": true,
    "markdown": false
  },
  "editor.wordWrapColumn": 120,
  "[html]": {
    "editor.defaultFormatter": "vscode.html-language-features"
  },
  "[python]": {
    "editor.formatOnSave": true,
    "editor.codeActionsOnSave": {
      "source.fixAll": "explicit",
      "source.organizeImports": "explicit"
    },
    "editor.defaultFormatter": "charliermarsh.ruff"
  },
  "ruff.lineLength": 120,
  "ruff.format.args": [
    "--line-length=120"
  ],
  "ruff.lint.args": [
    "--line-length=120"
  ],
  "yaml.customTags": [
    "!And",
    "!And sequence",
    "!If",
    "!If sequence",
    "!Not",
    "!Not sequence",
    "!Equals",
    "!Equals sequence",
    "!Or",
    "!Or sequence",
    "!FindInMap",
    "!FindInMap sequence",
    "!Base64",
    "!Join",
    "!Join sequence",
    "!Cidr",
    "!Ref",
    "!Sub",
    "!Sub sequence",
    "!GetAtt",
    "!GetAZs",
    "!ImportValue",
    "!ImportValue sequence",
    "!Select",
    "!Select sequence",
    "!Split",
    "!Split sequence"
  ],
  "aws.codeWhisperer.shareCodeWhispererContentWithAWS": false,
  "editor.rulers": [
    120
  ],
  "python.autoComplete.extraPaths": [
    "src"
  ],
  "python.analysis.extraPaths": [
    "src"
  ],
  "python.analysis.inlayHints.functionReturnTypes": true,
  "python.analysis.inlayHints.variableTypes": false, // clutters to much for my taste (especially for unions of many types)
  "python.analysis.typeCheckingMode": "strict", // "strict" commonly complains about missing stubs
  "python.analysis.autoFormatStrings": true,
  "python.analysis.importFormat": "absolute",
  "python.analysis.autoImportCompletions": true,
  "python.analysis.autoSearchPaths": true,
  "editor.formatOnSaveMode": "file",
  "editor.formatOnSave": true,
  "editor.codeActionsOnSave": {
    "source.organizeImports": "always"
  },
  "editor.lineNumbers": "relative",
  "editor.cursorSurroundingLines": 8,
  "vim.normalModeKeyBindingsNonRecursive": [
    {
      "before": [
        "<C-u>"
      ],
      "after": [
        "<C-u>",
        "z",
        "z"
      ]
    },
    {
      "before": [
        "<C-d>"
      ],
      "after": [
        "<C-d>",
        "z",
        "z"
      ]
    },
    {
      "before": [
        "U"
      ], // doesn't work correctly in VS Code, and creates a broken undo-history, which is dangerous!
      "after": [
        "u"
      ],
    },
    // // This would rebind it to the VS Code internal undo action, but I find the vim undo be nicer when using vim
    // {
    //   "before": [
    //     "u"
    //   ],
    //   "after": [],
    //   "commands": [
    //     {
    //       "command": "undo"
    //     }
    //   ]
    // },
    // // Likewise, this would rebind Ctrl+R to VS Code's redo
    // {
    //   "before": [
    //     "<C-r>"
    //   ],
    //   "after": [],
    //   "commands": [
    //     {
    //       "command": "redo"
    //     }
    //   ]
    // }
    // // after all, the default vim <C-i> and <C-o> aren't actually that bad, and it makes sense to get used to them
    // // so we will leave this commented out
    // {
    //   "before": [
    //     "<C-o>"
    //   ],
    //   "after": [
    //     "z",
    //     "z"
    //   ],
    //   "commands": [
    //     {
    //       "command": "cursorUndo"
    //     }
    //   ]
    // },
    // {
    //   "before": [
    //     "<C-i>"
    //   ],
    //   "after": [
    //     "z",
    //     "z"
    //   ],
    //   "commands": [
    //     {
    //       "command": "cursorRedo"
    //     }
    //   ]
    // },
    // // this part doesn't seem to work anyways
    // {
    //   "before": [
    //     "<C-O>"
    //   ],
    //   "after": [],
    //   "commands": [
    //     {
    //       "command": "workbench.action.navigateBack"
    //     }
    //   ]
    // },
    // {
    //   "before": [
    //     "<C-I>"
    //   ],
    //   "after": [],
    //   "commands": [
    //     {
    //       "command": "workbench.action.navigateForward"
    //     }
    //   ]
    // },
    {
      "before": [
        "n"
      ],
      "after": [
        "n",
        "z",
        "z"
      ],
    },
    {
      "before": [
        "N"
      ],
      "after": [
        "N",
        "z",
        "z"
      ],
    },
    {
      "before": [
        "<leader>",
        "x"
      ],
      "after": [
        "\"",
        "_",
        "x"
      ]
    },
    {
      "before": [
        "<leader>",
        "c"
      ],
      "after": [
        "\"",
        "_",
        "c"
      ]
    },
    {
      "before": [
        "<leader>",
        "d"
      ],
      "after": [
        "\"",
        "_",
        "d"
      ]
    },
    {
      "before": [
        "<leader>",
        "C"
      ],
      "after": [
        "\"",
        "_",
        "C"
      ]
    },
    {
      "before": [
        "<leader>",
        "D"
      ],
      "after": [
        "\"",
        "_",
        "D"
      ]
    },
    {
      "before": [
        "<C-l>"
      ],
      "after": [
        "<Esc>"
      ],
    },
    {
      "before": [
        "<leader>",
        "<leader>",
        "y"
      ],
      "after": [
        "\"",
        "+",
        "y"
      ]
    },
    {
      "before": [
        "<leader>",
        "<leader>",
        "Y"
      ],
      "after": [
        "\"",
        "+",
        "Y"
      ]
    },
    {
      "before": [
        "<leader>",
        "<leader>",
        "p"
      ],
      "after": [
        "\"",
        "+",
        "p"
      ]
    },
    {
      "before": [
        "<leader>",
        "<leader>",
        "P"
      ],
      "after": [
        "\"",
        "+",
        "P"
      ]
    },
    {
      "before": [
        "z",
        "1"
      ],
      "after": [],
      "commands": [
        {
          "command": "editor.unfoldAll"
        },
        {
          "command": "editor.foldLevel1"
        }
      ]
    },
    {
      "before": [
        "z",
        "2"
      ],
      "after": [],
      "commands": [
        {
          "command": "editor.unfoldAll"
        },
        {
          "command": "editor.foldLevel2"
        }
      ]
    },
    {
      "before": [
        "z",
        "3"
      ],
      "after": [],
      "commands": [
        {
          "command": "editor.unfoldAll"
        },
        {
          "command": "editor.foldLevel3"
        }
      ]
    },
    {
      "before": [
        "z",
        "4"
      ],
      "after": [],
      "commands": [
        {
          "command": "editor.unfoldAll"
        },
        {
          "command": "editor.foldLevel4"
        }
      ]
    },
    {
      "before": [
        "z",
        "5"
      ],
      "after": [],
      "commands": [
        {
          "command": "editor.unfoldAll"
        },
        {
          "command": "editor.foldLevel5"
        }
      ]
    },
    {
      "before": [
        "z",
        "6"
      ],
      "after": [],
      "commands": [
        {
          "command": "editor.unfoldAll"
        },
        {
          "command": "editor.foldLevel6"
        }
      ]
    },
    {
      "before": [
        "z",
        "7"
      ],
      "after": [],
      "commands": [
        {
          "command": "editor.unfoldAll"
        },
        {
          "command": "editor.foldLevel7"
        }
      ]
    },
    {
      "before": [
        "z",
        "0"
      ],
      "after": [],
      "commands": [
        {
          "command": "editor.unfoldAll"
        },
      ]
    },
    {
      "before": [
        "<C-p>"
      ],
      "after": [],
      "commands": [
        {
          "command": "workbench.action.quickOpen"
        },
      ]
    },
    {
      "before": [
        "J"
      ],
      "after": [
        "m",
        "y",
        "J",
        "`",
        "y"
      ]
    },
    {
      "before": [
        "<leader>",
        "s"
      ],
      "after": [
        ":",
        "%",
        "s",
        "/",
        "\\",
        "<",
        "<C-r>",
        "<C-w>",
        "\\",
        ">",
        "/",
        "<C-r>",
        "<C-w>",
        "/",
        "g",
        "I",
        "<Left>",
        "<Left>",
        "<Left>",
      ]
    },
    {
      "before": [
        "<leader>",
        "/"
      ],
      "after": [
        "/",
        "\\",
        "C"
      ]
    },
    {
      "before": [
        "G"
      ],
      "after": [
        "G",
        "z",
        "z"
      ]
    },
    {
      "before": [
        "*"
      ],
      "after": [
        "*",
        "z",
        "z"
      ]
    },
    {
      "before": [
        "#"
      ],
      "after": [
        "#",
        "z",
        "z"
      ]
    },
    {
      "before": [
        "g",
        "h",
      ],
      "after": [],
      "commands": [
        {
          "command": "editor.showCallHierarchy",
        },
      ]
    },
    {
      "before": [
        "g",
        "H",
      ],
      "after": [],
      "commands": [
        {
          "command": "editor.showTypeHierarchy",
        },
      ]
    },
    // // This used to be a fix for a bug in VSCodeVim, (H/L would not consider scrolloff), but it seems to be fixed now
    // {
    //   "before": [
    //     "H",
    //   ],
    //   "after": [
    //     "L",
    //     "H",
    //   ],
    // },
    // {
    //   "before": [
    //     "L",
    //   ],
    //   "after": [
    //     "H",
    //     "L",
    //   ],
    // },
    {
      "before": [
        "<C-j>",
      ],
      "after": [
        "g",
        "j",
      ],
    },
    {
      "before": [
        "<C-k>",
      ],
      "after": [
        "g",
        "k",
      ],
    },
    {
      "before": [
        "<C-n>"
      ],
      "commands": [
        ":nohl"
      ]
    },
    {
      "before": [
        "<C-w>",
        "z"
      ],
      "commands": [
        "workbench.action.toggleCenteredLayout"
      ]
    },
    // the following 2 commands are a workaround since VSCode 1.90.0 broke the standard <C-w> v/s binding of VSCodeVim
    {
      "before": [
        "<C-w>",
        "v"
      ],
      "commands": [
        "workbench.action.splitEditor"
      ]
    },
    {
      "before": [
        "<C-w>",
        "s"
      ],
      "commands": [
        "workbench.action.splitEditorDown"
      ]
    },
    {
      "before": [
        "<leader>",
        "1"
      ],
      "commands": [
        "vscode-harpoon.gotoEditor1"
      ]
    },
    {
      "before": [
        "<leader>",
        "2"
      ],
      "commands": [
        "vscode-harpoon.gotoEditor2"
      ]
    },
    {
      "before": [
        "<leader>",
        "3"
      ],
      "commands": [
        "vscode-harpoon.gotoEditor3"
      ]
    },
    {
      "before": [
        "<leader>",
        "4"
      ],
      "commands": [
        "vscode-harpoon.gotoEditor4"
      ]
    },
    {
      "before": [
        "<leader>",
        "5"
      ],
      "commands": [
        "vscode-harpoon.gotoEditor5"
      ]
    },
    {
      "before": [
        "<leader>",
        "6"
      ],
      "commands": [
        "vscode-harpoon.gotoEditor6"
      ]
    },
    {
      "before": [
        "<leader>",
        "7"
      ],
      "commands": [
        "vscode-harpoon.gotoEditor7"
      ]
    },
    {
      "before": [
        "<leader>",
        "8"
      ],
      "commands": [
        "vscode-harpoon.gotoEditor8"
      ]
    },
    {
      "before": [
        "<leader>",
        "9"
      ],
      "commands": [
        "vscode-harpoon.gotoEditor9"
      ]
    },
    {
      "before": [
        "<leader>",
        "<leader>",
        "1"
      ],
      "commands": [
        "vscode-harpoon.addEditor1"
      ]
    },
    {
      "before": [
        "<leader>",
        "<leader>",
        "2"
      ],
      "commands": [
        "vscode-harpoon.addEditor2"
      ]
    },
    {
      "before": [
        "<leader>",
        "<leader>",
        "3"
      ],
      "commands": [
        "vscode-harpoon.addEditor3"
      ]
    },
    {
      "before": [
        "<leader>",
        "<leader>",
        "4"
      ],
      "commands": [
        "vscode-harpoon.addEditor4"
      ]
    },
    {
      "before": [
        "<leader>",
        "<leader>",
        "5"
      ],
      "commands": [
        "vscode-harpoon.addEditor5"
      ]
    },
    {
      "before": [
        "<leader>",
        "<leader>",
        "6"
      ],
      "commands": [
        "vscode-harpoon.addEditor6"
      ]
    },
    {
      "before": [
        "<leader>",
        "<leader>",
        "7"
      ],
      "commands": [
        "vscode-harpoon.addEditor7"
      ]
    },
    {
      "before": [
        "<leader>",
        "<leader>",
        "8"
      ],
      "commands": [
        "vscode-harpoon.addEditor8"
      ]
    },
    {
      "before": [
        "<leader>",
        "<leader>",
        "9"
      ],
      "commands": [
        "vscode-harpoon.addEditor9"
      ]
    },
    {
      "before": [
        "<leader>",
        "<leader>",
        "ä"
      ],
      "commands": [
        "vscode-harpoon.editEditors"
      ]
    },
    {
      "before": [
        "<leader>",
        "ä"
      ],
      "commands": [
        "vscode-harpoon.editorQuickPick"
      ]
    },
    {
      "before": [
        "<leader>",
        "o"
      ],
      "commands": [
        "vscode-harpoon.gotoPreviousHarpoonEditor"
      ]
    },
  ],
  "vim.visualModeKeyBindingsNonRecursive": [
    {
      "before": [
        "<leader>",
        "p"
      ],
      "after": [
        "\"",
        "_",
        "d",
        "P"
      ]
    },
    {
      "before": [
        "<leader>",
        "<leader>",
        "y"
      ],
      "after": [
        "\"",
        "+",
        "y"
      ]
    },
    {
      "before": [
        "<leader>",
        "<leader>",
        "p"
      ],
      "after": [
        "\"",
        "+",
        "p"
      ]
    },
    {
      "before": [
        "<leader>",
        "<leader>",
        "P"
      ],
      "after": [
        "\"",
        "+",
        "P"
      ]
    },
    {
      "before": [
        "<C-l>"
      ],
      "after": [
        "<Esc>"
      ],
    },
    // // like in normal mode, we actually rather use vim's Ctrl+I/O
    // {
    //   "before": [
    //     "<C-o>"
    //   ],
    //   "after": [],
    //   "commands": [
    //     {
    //       "command": "cursorUndo"
    //     }
    //   ]
    // },
    // {
    //   "before": [
    //     "<C-i>"
    //   ],
    //   "after": [],
    //   "commands": [
    //     {
    //       "command": "cursorRedo"
    //     }
    //   ]
    // },
    {
      "before": [
        "<C-p>"
      ],
      "after": [],
      "commands": [
        {
          "command": "workbench.action.quickOpen"
        },
      ]
    },
    {
      "before": [
        "<"
      ],
      "after": [
        "<",
        "g",
        "v"
      ],
    },
    {
      "before": [
        ">"
      ],
      "after": [
        ">",
        "g",
        "v"
      ],
    },
    // // Stay in visual mode after yanking? Not so sure about this... usually you want to leave visual mode.
    // // The annoying thing is that the cursor resets to where you started making the selection
    // {
    //   "before": [
    //     "y"
    //   ],
    //   "after": [
    //     "y",
    //     "g",
    //     "v"
    //   ],
    // },
    {
      "before": [
        "<leader>",
        "x"
      ],
      "after": [
        "\"",
        "_",
        "x"
      ]
    },
    {
      "before": [
        "<leader>",
        "c"
      ],
      "after": [
        "\"",
        "_",
        "c"
      ]
    },
    {
      "before": [
        "<leader>",
        "d"
      ],
      "after": [
        "\"",
        "_",
        "d"
      ]
    },
    {
      "before": [
        "<leader>",
        "C"
      ],
      "after": [
        "\"",
        "_",
        "C"
      ]
    },
    {
      "before": [
        "<leader>",
        "D"
      ],
      "after": [
        "\"",
        "_",
        "D"
      ]
    },
    {
      "before": [
        "<leader>",
        "/"
      ],
      "after": [
        "y",
        "/",
        "<C-R>",
        "0",
        "<CR>"
      ]
    },
    {
      "before": [
        "<C-u>"
      ],
      "after": [
        "<C-u>",
        "z",
        "z"
      ]
    },
    {
      "before": [
        "<C-d>"
      ],
      "after": [
        "<C-d>",
        "z",
        "z"
      ]
    },
    {
      "before": [
        "G"
      ],
      "after": [
        "G",
        "z",
        "z"
      ]
    },
    {
      "before": [
        "*"
      ],
      "after": [
        "*",
        "z",
        "z"
      ]
    },
    {
      "before": [
        "#"
      ],
      "after": [
        "#",
        "z",
        "z"
      ]
    },
    {
      "before": [
        "n"
      ],
      "after": [
        "n",
        "z",
        "z"
      ],
    },
    {
      "before": [
        "N"
      ],
      "after": [
        "N",
        "z",
        "z"
      ],
    },
    {
      "before": [
        "H",
      ],
      "after": [
        "L",
        "H",
      ],
    },
    {
      "before": [
        "L",
      ],
      "after": [
        "H",
        "L",
      ],
    },
    {
      "before": [
        "<C-j>",
      ],
      "after": [
        "g",
        "j",
      ],
    },
    {
      "before": [
        "<C-k>",
      ],
      "after": [
        "g",
        "k",
      ],
    },
    {
      "before": [
        "<leader>",
        "1"
      ],
      "commands": [
        "vscode-harpoon.gotoEditor1"
      ]
    },
    {
      "before": [
        "<leader>",
        "2"
      ],
      "commands": [
        "vscode-harpoon.gotoEditor2"
      ]
    },
    {
      "before": [
        "<leader>",
        "3"
      ],
      "commands": [
        "vscode-harpoon.gotoEditor3"
      ]
    },
    {
      "before": [
        "<leader>",
        "4"
      ],
      "commands": [
        "vscode-harpoon.gotoEditor4"
      ]
    },
    {
      "before": [
        "<leader>",
        "5"
      ],
      "commands": [
        "vscode-harpoon.gotoEditor5"
      ]
    },
    {
      "before": [
        "<leader>",
        "6"
      ],
      "commands": [
        "vscode-harpoon.gotoEditor6"
      ]
    },
    {
      "before": [
        "<leader>",
        "7"
      ],
      "commands": [
        "vscode-harpoon.gotoEditor7"
      ]
    },
    {
      "before": [
        "<leader>",
        "8"
      ],
      "commands": [
        "vscode-harpoon.gotoEditor8"
      ]
    },
    {
      "before": [
        "<leader>",
        "9"
      ],
      "commands": [
        "vscode-harpoon.gotoEditor9"
      ]
    },
    {
      "before": [
        "<leader>",
        "<leader>",
        "1"
      ],
      "commands": [
        "vscode-harpoon.addEditor1"
      ]
    },
    {
      "before": [
        "<leader>",
        "<leader>",
        "2"
      ],
      "commands": [
        "vscode-harpoon.addEditor2"
      ]
    },
    {
      "before": [
        "<leader>",
        "<leader>",
        "3"
      ],
      "commands": [
        "vscode-harpoon.addEditor3"
      ]
    },
    {
      "before": [
        "<leader>",
        "<leader>",
        "4"
      ],
      "commands": [
        "vscode-harpoon.addEditor4"
      ]
    },
    {
      "before": [
        "<leader>",
        "<leader>",
        "5"
      ],
      "commands": [
        "vscode-harpoon.addEditor5"
      ]
    },
    {
      "before": [
        "<leader>",
        "<leader>",
        "6"
      ],
      "commands": [
        "vscode-harpoon.addEditor6"
      ]
    },
    {
      "before": [
        "<leader>",
        "<leader>",
        "7"
      ],
      "commands": [
        "vscode-harpoon.addEditor7"
      ]
    },
    {
      "before": [
        "<leader>",
        "<leader>",
        "8"
      ],
      "commands": [
        "vscode-harpoon.addEditor8"
      ]
    },
    {
      "before": [
        "<leader>",
        "<leader>",
        "9"
      ],
      "commands": [
        "vscode-harpoon.addEditor9"
      ]
    },
    {
      "before": [
        "<leader>",
        "<leader>",
        "ä"
      ],
      "commands": [
        "vscode-harpoon.editEditors"
      ]
    },
    {
      "before": [
        "<leader>",
        "ä"
      ],
      "commands": [
        "vscode-harpoon.editorQuickPick"
      ]
    },
    {
      "before": [
        "<leader>",
        "o"
      ],
      "commands": [
        "vscode-harpoon.gotoPreviousHarpoonEditor"
      ]
    },
  ],
  "vim.insertModeKeyBindingsNonRecursive": [
    {
      "before": [
        "<C-l>"
      ],
      "after": [
        "<Esc>"
      ],
    },
  ],
  "vim.commandLineModeKeyBindingsNonRecursive": [
    {
      "before": [
        "<C-l>"
      ],
      "after": [
        "<Esc>"
      ],
    },
    {
      "before": [
        "<C-j>"
      ],
      "after": [
        "<C-l>"
      ],
    },
  ],
  "[jsonc]": {
    "editor.defaultFormatter": "vscode.json-language-features"
  },
  "[json]": {
    "editor.defaultFormatter": "vscode.json-language-features"
  },
  "vim.leader": " ",
  "workbench.panel.defaultLocation": "right",
  "editor.accessibilitySupport": "off",
  "editor.occurrencesHighlight": "multiFile",
  "workbench.tree.enableStickyScroll": true,
  "notebook.stickyScroll.enabled": true,
  "editor.stickyScroll.enabled": true,
  "gitlens.keymap": "alternate",
  "editor.mouseWheelZoom": true,
  "zenMode.showTabs": "single",
  "zenMode.hideLineNumbers": false,
  "terminal.integrated.tabs.hideCondition": "singleGroup",
  "gitlens.blame.format": "${author|40} ${message|60?} ${agoOrDate|14-}",
  "gitlens.blame.toggleMode": "window",
  "diffEditor.experimental.showMoves": true,
  "zenMode.hideStatusBar": false,
  "debug.openDebug": "neverOpen",
  "workbench.activityBar.location": "top",
  "diffEditor.renderGutterMenu": false,
  "vim.visualstar": true,
  "vim.highlightedyank.enable": true,
  "vim.gdefault": true,
  "vim.textwidth": 120,
  "vim.sneakReplacesF": true,
  "vim.easymotion": true,
  "notebook.lineNumbers": "on",
  "markdownlint.config": {
    "MD038": false,
    "MD026": false
  },
  "diffEditor.renderSideBySide": true,
  "python.analysis.inlayHints.pytestParameters": true,
  "cSpell.allowCompoundWords": true,
  "githubPullRequests.fileListLayout": "flat",
  "vim.camelCaseMotion.enable": true,
  "terminal.integrated.commandsToSkipShell": [
    "workbench.action.toggleCenteredLayout"
  ],
  "github.copilot.editor.enableAutoCompletions": true,
  "workbench.editor.wrapTabs": true,
  "vim.easymotionKeys": "hklyuiopnm,qwertzxcvbasdgjfö-",
  "vim.hlsearch": true,
  "errorLens.enabled": false,
  "git.untrackedChanges": "separate",
  "output.smartScroll.enabled": false,
  "workbench.editor.centeredLayoutFixedWidth": true,
  "inlineChat.experimental.textButtons": true,
  "diffEditor.experimental.useTrueInlineView": true,
  "accessibility.voice.speechTimeout": 10000,
  "accessibility.voice.autoSynthesize": "on",
  "gitlens.advanced.messages": {
    "suppressIntegrationRequestFailed500Warning": true
  },
  "github.copilot.chat.search.semanticTextResults": false,
  "python.terminal.shellIntegration.enabled": true,
  "github.copilot.chat.testGeneration.instructions": [
    {
      "text": "Always write tests in pytest style. Avoid code duplication during test setup by using pytest fixtures. Always include comments in the form of # GIVEN, # WHEN, # THEN. Always include short docstrings for the test module, each fixture, and each test function. Create separate test functions for every test."
    }
  ],
  "github.copilot.chat.editor.temporalContext.enabled": true,
  "workbench.sideBar.location": "right",
  "workbench.navigationControl.enabled": false,
  "vim.easymotionMarkerForegroundColorOneChar": "#ffffff",
}