{
  "[yaml]": {
    "editor.insertSpaces": true,
    "editor.tabSize": 2,
    "editor.autoIndent": "keep",
    "gitlens.codeLens.scopes": [
      "document"
    ],
    "editor.quickSuggestions": {
      "other": true,
      "comments": false,
      "strings": true
    }
  },
  "svg.preview.mode": "img",
  "files.watcherExclude": {
    "**/.*cache/**": true,
    "**/.dash/**": true,
    "**/.venv/**": true
  },
  "githubPullRequests.pullBranch": "never",
  "workbench.editorAssociations": {
    "*.ipynb": "jupyter-notebook"
  },
  "editor.suggestSelection": "first",
  "vsintellicode.modify.editor.suggestSelection": "automaticallyOverrodeDefaultValue",
  "files.autoSave": "afterDelay",
  "notebook.cellToolbarLocation": {
    "default": "right",
    "jupyter-notebook": "left"
  },
  "workbench.editor.wrapTabs": true,
  "redhat.telemetry.enabled": false,
  "jupyter.askForKernelRestart": false,
  "terminal.integrated.defaultProfile.windows": "PowerShell",
  "explorer.confirmDragAndDrop": false,
  "terminal.integrated.cursorStyle": "line",
  "notebook.output.textLineLimit": 200,
  "editor.inlineSuggest.enabled": true,
  "github.copilot.enable": {
    "*": true,
    "yaml": false,
    "plaintext": true,
    "markdown": false
  },
  "editor.wordWrapColumn": 120,
  "[html]": {
    "editor.defaultFormatter": "NikolaosGeorgiou.html-fmt-vscode"
  },
  "[python]": {
    "editor.formatOnType": true,
    "editor.defaultFormatter": "ms-python.black-formatter" // old: "mikoz.black-py"
  },
  "yaml.customTags": [
    "!And",
    "!And sequence",
    "!If",
    "!If sequence",
    "!Not",
    "!Not sequence",
    "!Equals",
    "!Equals sequence",
    "!Or",
    "!Or sequence",
    "!FindInMap",
    "!FindInMap sequence",
    "!Base64",
    "!Join",
    "!Join sequence",
    "!Cidr",
    "!Ref",
    "!Sub",
    "!Sub sequence",
    "!GetAtt",
    "!GetAZs",
    "!ImportValue",
    "!ImportValue sequence",
    "!Select",
    "!Select sequence",
    "!Split",
    "!Split sequence"
  ],
  "aws.codeWhisperer.shareCodeWhispererContentWithAWS": false,
  "editor.rulers": [
    120
  ],
  "python.autoComplete.extraPaths": [
    "src"
  ],
  "python.analysis.extraPaths": [
    "src"
  ],
  "python.analysis.inlayHints.functionReturnTypes": true,
  "python.analysis.inlayHints.variableTypes": false, // clutters to much for my taste (especially for unions of many types)
  "python.analysis.typeCheckingMode": "basic", // "strict" commonly complains about missing stubs
  "python.analysis.autoFormatStrings": true,
  "python.analysis.importFormat": "absolute",
  "python.analysis.autoImportCompletions": true,
  "python.analysis.autoSearchPaths": true,
  "editor.formatOnSaveMode": "file",
  "editor.formatOnSave": true,
  "editor.codeActionsOnSave": {
    "source.organizeImports": true
  },
  "editor.lineNumbers": "relative",
  "editor.cursorSurroundingLines": 8,
  "vim.normalModeKeyBindingsNonRecursive": [
    {
      "before": [
        "<C-u>"
      ],
      "after": [
        "<C-u>",
        "z",
        "z"
      ]
    },
    {
      "before": [
        "<C-d>"
      ],
      "after": [
        "<C-d>",
        "z",
        "z"
      ]
    },
    {
      "before": [
        "U"
      ], // doesn't work correctly in VS Code, and creates a broken undo-history, which is dangerous!
      "after": [
        "u"
      ],
    },
    // // This would rebind it to the VS Code internal undo action, but I find the vim undo be nicer when using vim
    // {
    //   "before": [
    //     "u"
    //   ],
    //   "after": [],
    //   "commands": [
    //     {
    //       "command": "undo"
    //     }
    //   ]
    // },
    // // Likeweise, this would rebind Ctrl+R to VS Code's redo
    // {
    //   "before": [
    //     "<C-r>"
    //   ],
    //   "after": [],
    //   "commands": [
    //     {
    //       "command": "redo"
    //     }
    //   ]
    // }
    // // after all, the default vim <C-i> and <C-o> aren't actually that bad, and it makes sense to get used to them
    // // so we will leave this commented out
    // {
    //   "before": [
    //     "<C-o>"
    //   ],
    //   "after": [
    //     "z",
    //     "z"
    //   ],
    //   "commands": [
    //     {
    //       "command": "cursorUndo"
    //     }
    //   ]
    // },
    // {
    //   "before": [
    //     "<C-i>"
    //   ],
    //   "after": [
    //     "z",
    //     "z"
    //   ],
    //   "commands": [
    //     {
    //       "command": "cursorRedo"
    //     }
    //   ]
    // },
    // // this part doesn't seem to work anyways
    // {
    //   "before": [
    //     "<C-O>"
    //   ],
    //   "after": [],
    //   "commands": [
    //     {
    //       "command": "workbench.action.navigateBack"
    //     }
    //   ]
    // },
    // {
    //   "before": [
    //     "<C-I>"
    //   ],
    //   "after": [],
    //   "commands": [
    //     {
    //       "command": "workbench.action.navigateForward"
    //     }
    //   ]
    // },
    {
      "before": [
        "n"
      ],
      "after": [
        "n",
        "z",
        "z"
      ],
    },
    {
      "before": [
        "N"
      ],
      "after": [
        "N",
        "z",
        "z"
      ],
    },
    {
      "before": [
        "<leader>",
        "c"
      ],
      "after": [
        "\"",
        "_",
        "c"
      ]
    },
    {
      "before": [
        "<leader>",
        "x"
      ],
      "after": [
        "\"",
        "_",
        "x"
      ]
    },
    {
      "before": [
        "<leader>",
        "d"
      ],
      "after": [
        "\"",
        "_",
        "d"
      ]
    },
    {
      "before": [
        "<C-l>"
      ],
      "after": [
        "<Esc>"
      ],
    },
    {
      "before": [
        "<leader>",
        "<leader>",
        "y"
      ],
      "after": [
        "\"",
        "+",
        "y"
      ]
    },
    {
      "before": [
        "<leader>",
        "<leader>",
        "p"
      ],
      "after": [
        "\"",
        "+",
        "p"
      ]
    },
    {
      "before": [
        "<leader>",
        "<leader>",
        "P"
      ],
      "after": [
        "\"",
        "+",
        "P"
      ]
    },
    {
      "before": [
        "z",
        "1"
      ],
      "after": [],
      "commands": [
        {
          "command": "editor.unfoldAll"
        },
        {
          "command": "editor.foldLevel1"
        }
      ]
    },
    {
      "before": [
        "z",
        "2"
      ],
      "after": [],
      "commands": [
        {
          "command": "editor.unfoldAll"
        },
        {
          "command": "editor.foldLevel2"
        }
      ]
    },
    {
      "before": [
        "z",
        "3"
      ],
      "after": [],
      "commands": [
        {
          "command": "editor.unfoldAll"
        },
        {
          "command": "editor.foldLevel3"
        }
      ]
    },
    {
      "before": [
        "z",
        "4"
      ],
      "after": [],
      "commands": [
        {
          "command": "editor.unfoldAll"
        },
        {
          "command": "editor.foldLevel4"
        }
      ]
    },
    {
      "before": [
        "z",
        "5"
      ],
      "after": [],
      "commands": [
        {
          "command": "editor.unfoldAll"
        },
        {
          "command": "editor.foldLevel5"
        }
      ]
    },
    {
      "before": [
        "z",
        "6"
      ],
      "after": [],
      "commands": [
        {
          "command": "editor.unfoldAll"
        },
        {
          "command": "editor.foldLevel6"
        }
      ]
    },
    {
      "before": [
        "z",
        "7"
      ],
      "after": [],
      "commands": [
        {
          "command": "editor.unfoldAll"
        },
        {
          "command": "editor.foldLevel7"
        }
      ]
    },
    {
      "before": [
        "z",
        "0"
      ],
      "after": [],
      "commands": [
        {
          "command": "editor.unfoldAll"
        },
      ]
    },
    {
      "before": [
        "<C-p>"
      ],
      "after": [],
      "commands": [
        {
          "command": "workbench.action.quickOpen"
        },
      ]
    },
    {
      "before": [
        "J"
      ],
      "after": [
        "m",
        "y",
        "J",
        "`",
        "y"
      ]
    },
    {
      "before": [
        "<leader>",
        "s"
      ],
      "after": [
        ":",
        "%",
        "s",
        "/",
        "\\",
        "<",
        "<C-r>",
        "<C-w>",
        "\\",
        ">",
        "/",
        "<C-r>",
        "<C-w>",
        "/",
        "g",
        "I",
        "<Left>",
        "<Left>",
        "<Left>",
      ]
    },
  ],
  "vim.visualModeKeyBindingsNonRecursive": [
    {
      "before": [
        "<leader>",
        "p"
      ],
      "after": [
        "\"",
        "_",
        "d",
        "P"
      ]
    },
    {
      "before": [
        "<leader>",
        "<leader>",
        "y"
      ],
      "after": [
        "\"",
        "+",
        "y"
      ]
    },
    {
      "before": [
        "<leader>",
        "<leader>",
        "p"
      ],
      "after": [
        "\"",
        "+",
        "p"
      ]
    },
    {
      "before": [
        "<leader>",
        "<leader>",
        "P"
      ],
      "after": [
        "\"",
        "+",
        "P"
      ]
    },
    {
      "before": [
        "<C-l>"
      ],
      "after": [
        "<Esc>"
      ],
    },
    // // like in normal mode, we actually rather use vim's Ctrl+I/O
    // {
    //   "before": [
    //     "<C-o>"
    //   ],
    //   "after": [],
    //   "commands": [
    //     {
    //       "command": "cursorUndo"
    //     }
    //   ]
    // },
    // {
    //   "before": [
    //     "<C-i>"
    //   ],
    //   "after": [],
    //   "commands": [
    //     {
    //       "command": "cursorRedo"
    //     }
    //   ]
    // },
    {
      "before": [
        "<C-p>"
      ],
      "after": [],
      "commands": [
        {
          "command": "workbench.action.quickOpen"
        },
      ]
    },
    {
      "before": [
        "<"
      ],
      "after": [
        "<",
        "g",
        "v"
      ],
    },
    {
      "before": [
        ">"
      ],
      "after": [
        ">",
        "g",
        "v"
      ],
    },
    // // Stay in visual mode after yanking? Not so sure about this... usually you want to leave visual mode.
    // // The annoying thing is that the cursor resets to where you started making the selection
    // {
    //   "before": [
    //     "y"
    //   ],
    //   "after": [
    //     "y",
    //     "g",
    //     "v"
    //   ],
    // },
    {
      "before": [
        "J"
      ],
      "after": [
        ":",
        "m",
        " ",
        "'",
        ">",
        "+",
        "1",
        "<CR>",
        "g",
        "v",
        ":",
        // either the above or the below will fail; the correct one of them will be executed (weird VSCode Vim behaviour)
        // for some reason, depending onwhich side of the visual selection the cursor is on, the meaning of the `< / `> marks switches
        // (and one of them seems to be invalid, leading the command to fail)
        // NOTE: '> is always the side the cursor is currently on, '< is always the other side! I.e. '< might actually
        // come *after* >'
        "m",
        " ",
        "'",
        "<",
        "+",
        "1",
        "<CR>",
        "g",
        "v",
        "j",
        "o",
        "j",
        "o",
      ],
    },
    {
      "before": [
        "K"
      ],
      "after": [
        ":",
        "m",
        " ",
        "'",
        ">",
        "-",
        "2",
        "<CR>",
        "g",
        "v",
        // either the above or the below will fail; the correct one of them will be executed (weird VSCode Vim behaviour)
        // for some reason, depending onwhich side of the visual selection the cursor is on, the meaning of the `< / `> marks switches
        // (and one of them seems to be invalid, leading the command to fail)
        // NOTE: '> is always the side the cursor is currently on, '< is always the other side! I.e. '< might actually
        // come *after* >'
        ":",
        "m",
        " ",
        "'",
        "<",
        "-",
        "2",
        "<CR>",
        "g",
        "v",
        "k",
        "o",
        "k",
        "o",
      ],
    },
    {
      "before": [
        "<leader>",
        "c"
      ],
      "after": [
        "\"",
        "_",
        "c"
      ]
    },
    {
      "before": [
        "<leader>",
        "x"
      ],
      "after": [
        "\"",
        "_",
        "x"
      ]
    },
    {
      "before": [
        "<leader>",
        "d"
      ],
      "after": [
        "\"",
        "_",
        "d"
      ]
    },
    {
      "before": [
        "<leader>",
        "/"
      ],
      "after": [
        "y",
        "/",
        "<C-R>",
        "0",
        "<CR>"
      ]
    },
  ],
  "vim.insertModeKeyBindingsNonRecursive": [
    {
      "before": [
        "<C-l>"
      ],
      "after": [
        "<Esc>"
      ],
    },
  ],
  "vim.commandLineModeKeyBindingsNonRecursive": [
    {
      "before": [
        "<C-l>"
      ],
      "after": [
        "<Esc>"
      ],
    },
    {
      "before": [
        "<C-j>"
      ],
      "after": [
        "<C-l>"
      ],
    },
  ],
  "[jsonc]": {
    "editor.defaultFormatter": "vscode.json-language-features"
  },
  "[json]": {
    "editor.defaultFormatter": "vscode.json-language-features"
  },
  "black-formatter.args": [
    "--line-length=120"
  ],
  "vim.leader": " ",
  "workbench.sideBar.location": "right",
  "workbench.panel.defaultLocation": "right",
  "files.exclude": {
    "**/.git": false
  },
  "editor.accessibilitySupport": "off",
  "notebook.lineNumbers": "on",
}